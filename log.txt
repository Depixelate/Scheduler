['Eng-I: Value Education', 'Eng-I: Need', 'Eng-I: Basic Guidelines', 'Eng-I: Content and Process', 'Eng-I: Self-Exploration', 'Eng-I: meaning', 'Eng-I: importance and process', 'Eng-I: Continuous Happiness and Prosperity', 'Eng-I: A look at basic Human Aspirations', 'Eng-I: Right understanding', 'Eng-I: Relationship and Physical Facilities', 'Eng-I: The basic requirements', 'Eng-I: Understanding Happiness and Prosperity', 'Eng-I: A critical appraisal of the current scenario', 'Eng-I: Method to fulfil the above human aspirations', 'Eng-I: UNDERSTANDING and living in harmony at various levels. ', 'Eng-II: An understanding human being as a co-existence of the sentient ‘I’ and the material ‘Body’', 'Eng-II: Understanding the needs of Self (‘I’) and ‘Body’', 'Eng-II: Sukh and Suvidha', 'Eng-II: Understanding the Body as an instrument of ‘I’ (I being the doer', 'Eng-II: seer and enjoyer)', 'Eng-II: Understanding the characteristics and activities of ‘I’ and harmony in ‘I’', 'Eng-II: Understanding the harmony of I with the Body: Sanyam and Swasthya', 'Eng-II: correct appraisal of Physical needs', 'Eng-II: the meaning of Prosperity in detail', 'Eng-II: Pro- grams to ensure Sanyam and Swasthya. ', 'Eng-III: Understanding harmony in the family', 'Eng-III: The basic unit of human interaction', 'Eng-III: understanding values in a human-to-human relationship', 'Eng-III: Understanding Trust', 'Eng-III: The foundational value in relationship', 'Eng-III: Difference between intention and competence', 'Eng-III: Understanding Respect', 'Eng-III: as the right evaluation', 'Eng-III: Difference between respect and differentiation', 'Eng-III: the other salient values in a relationship', 'Eng-III: Understanding the harmony in the society', 'Eng-III: comprehensive Human Goals', 'Eng-III: Visualizing a universal harmonious order in society', 'Eng-III: Undivided Society', 'Eng-III: Universal Order', 'Eng-III: From family to world family! ', 'Eng-IV: Understanding the harmony in Nature', 'Eng-IV: Interconnectedness', 'Eng-IV: self-regulation and mutual fulfilment among the four orders of nature', 'Eng-IV: recyclability', 'Eng-IV: Understanding Existence as Coexistence of mutually interacting units in all-pervasive space', 'Eng-IV: Holistic perception of harmony at all levels of existence. ', 'Eng-V: Natural acceptance of human values', 'Eng-V: Definitiveness of Ethical Human Conduct', 'Eng-V: Basis for Humanistic Education', 'Eng-V: Humanistic Constitution and Humanistic Universal Order', 'Eng-V: Competence in Professional Ethics', 'Eng-V: augmenting universal human order', 'Eng-V: the scope and characteristics of people-friendly and eco-friendly', 'Eng-V: Holistic Technologies', 'Eng-V: production systems and management models', 'Eng-V: Case studies', 'Eng-V: Strategy for the transition from the present state to Universal Human Order', 'Eng-V: At the level of individual: as socially and ecologically responsible engineers', 'Eng-V: technologists and managers', 'Eng-V: At the level of society: as mutually enriching institutions and organizations. ']

['Math-I: Propositional Logic', 'Math-I: Propositional equivalences', 'Math-I: Predicates and quantifiers', 'Math-I: Nested quantifiers', 'Math-I: Rules of inference', 'Math-I: Introduction to proofs', 'Math-I: Proof methods and strategy', 'Math-I: Normal forms', 'Math-I: Applications to switching circuits. ', 'Math-II: Mathematical induction', 'Math-II: Strong induction', 'Math-II: The pigeonhole principle', 'Math-II: Recurrence relations', 'Math-II: Partition of integers', 'Math-II: Solving linear recurrence relations using generating functions', 'Math-II: Inclusion and Exclusion Principle and its applications. ', 'Math-III: Graphs', 'Math-III: Graph terminology and special types of graphs', 'Math-III: Subgraphs', 'Math-III: Matrix representation of graphs and graph isomorphism', 'Math-III: Connectivity', 'Math-III: Eulerian and Hamilton graphs. ', 'Math-IV: Algebraic systems', 'Math-IV: Semi groups and monoids', 'Math-IV: Groups', 'Math-IV: Subgroups Homomorphisms', 'Math-IV: Normal subgroup and coset', 'Math-IV: Lagrange’s theorem', 'Math-IV: Definitions and examples of Rings and Fields. ', 'Math-V: Partial ordering', 'Math-V: Posets', 'Math-V: Lattices as Posets', 'Math-V: Properties of lattices', 'Math-V: Lattices as algebraic systems', 'Math-V: Sublattices', 'Math-V: Direct product and Homomorphism', 'Math-V: Boolean algebra', 'Math-V: Stone’s representation Theorem. ']

['DD-I: Number Systems', 'DD-I: Arithmetic Operations', 'DD-I: Binary Codes', 'DD-I: Boolean Algebra and Logic Gates', 'DD-I: Theorems and Properties of Boolean Algebra', 'DD-I: Boolean Functions', 'DD-I: Canonical and Standard Forms', 'DD-I: Simplification of Boolean Functions using Karnaugh Map', 'DD-I: Logic Gates', 'DD-I: NAND and NOR Implementations. ', 'DD-II: Combinational Circuits', 'DD-II: Analysis and Design Procedures', 'DD-II: Binary Adder', 'DD-II: Subtractor', 'DD-II: Decimal Adder', 'DD-II: Binary Multiplier', 'DD-II: Magnitude Comparator', 'DD-II: Decoders', 'DD-II: Encoders', 'DD-II: Multiplexers', 'DD-II: Introduction to HDL', 'DD-II: HDL Models of Combinational circuits. ', 'DD-III: Sequential Circuits', 'DD-III: Storage Elements: Latches', 'DD-III: Flip', 'DD-III: Flops', 'DD-III: Analysis of Clocked Sequential Circuits', 'DD-III: State Reduction and Assignment', 'DD-III: Design Procedure', 'DD-III: Registers and Counters', 'DD-III: HDL Models of Sequential Circuits. ', 'DD-IV: Analysis and Design of Asynchronous Sequential Circuits', 'DD-IV: Reduction of State and Flow Tables', 'DD-IV: Race-free State Assignment', 'DD-IV: Hazards. ', 'DD-V: RAM', 'DD-V: Memory Decoding', 'DD-V: Error Detection and Correction', 'DD-V: ROM', 'DD-V: Programmable Logic Array', 'DD-V: Programmable Array Logic', 'DD-V: Sequential Programmable Devices. ']

['DSA-I: Algorithm Analysis: Running time calculations', 'DSA-I: Abstract Data Types (ADTs)', 'DSA-I: List ADT: Array implementation of lists', 'DSA-I: Linked lists', 'DSA-I: Circular linked lists', 'DSA-I: Doubly linked lists', 'DSA-I: Applications of Lists: Polynomial manipulation. ', 'DSA-II: Stack ADT: Stack model', 'DSA-II: Implementation of stacks', 'DSA-II: Applications: Balancing symbols', 'DSA-II: Infix to postfix conversion', 'DSA-II: Evaluating postfix expressions', 'DSA-II: Function calls', 'DSA-II: Queue ADT: Queue model', 'DSA-II: Array implementation of queues', 'DSA-II: Applications of queues. ', 'DSA-III: Preliminaries', 'DSA-III: Binary trees: Expression trees', 'DSA-III: Binary search tree ADT', 'DSA-III: AVL trees', 'DSA-III: Tree traversals', 'DSA-III: B- Trees', 'DSA-III: Priority Queues: Binary heap. ', 'DSA-IV: Graph Algorithms: Definitions', 'DSA-IV: Representation of graphs', 'DSA-IV: Graph Traversals: Breadth-first traversal', 'DSA-IV: Depth-first traversal', 'DSA-IV: Topological sort', 'DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm', 'DSA-IV: All-pairs shortest path. ', 'DSA-V: Sorting: Insertion sort', 'DSA-V: Shell sort', 'DSA-V: Radix Exchange sort', 'DSA-V: Hashing: Hash function', 'DSA-V: Separate chaining', 'DSA-V: Open addressing', 'DSA-V: Rehashing', 'DSA-V: Extendible hashing. ']

['OOP-I: Principles of OOP: Classes', 'OOP-I: Objects', 'OOP-I: Data hiding', 'OOP-I: Data encapsulation', 'OOP-I: Inheritance', 'OOP-I: Poly- morphism', 'OOP-I: Definition of Classes: Objects', 'OOP-I: Methods', 'OOP-I: Access specifiers', 'OOP-I: Static and final classes and members', 'OOP-I: Object Construction and Destruction', 'OOP-I: Fundamental programming structures in Java', 'OOP-I: Streams: Input', 'OOP-I: Output', 'OOP-I: String handling', 'OOP-I: Examples in Java. ', 'OOP-II: Inheritance: Definition', 'OOP-II: Types of inheritance: Single', 'OOP-II: Multilevel', 'OOP-II: Multiple', 'OOP-II: Hierarchical', 'OOP-II: Subclass constructors', 'OOP-II: Interfaces in Java: Definition', 'OOP-II: Implementation', 'OOP-II: Extending interfaces', 'OOP-II: Inheritance versus delegation', 'OOP-II: Inheritance rules', 'OOP-II: Inner classes', 'OOP-II: Examples in Java. ', 'OOP-III: Polymorphism: Method overloading and overriding', 'OOP-III: Dynamic method dispatch', 'OOP-III: Exceptions: Hierarchy', 'OOP-III: Built-in exceptions', 'OOP-III: Creating own exception', 'OOP-III: Packages in Java', 'OOP-III: Examples in Java. ', 'OOP-IV: Definition and concepts: Generic classes and generic methods', 'OOP-IV: Generic types', 'OOP-IV: Restrictions and limitations', 'OOP-IV: Inheritance rules for generic types', 'OOP-IV: Reflections', 'OOP-IV: Examples in Java. ', 'OOP-V: ALGORITHMS 9 Introduction to collections', 'OOP-V: Collection Classes and Interfaces: Array list', 'OOP-V: Linked list', 'OOP-V: Queue', 'OOP-V: Set', 'OOP-V: Trees', 'OOP-V: Iterators for collections', 'OOP-V: Map class', 'OOP-V: Collection algorithms: Sorting', 'OOP-V: Searching', 'OOP-V: User-defined algorithms', 'OOP-V: Examples in Java. ']

['DD Lab: 1. Verification of Boolean Theorems using basic gates.', 'DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code\nconverters.', 'DD Lab: 3. Design and implement half/full adder and subtractor.', 'DD Lab: 4. Design and implement combinational circuits using MSI devices:\n• 4-bit binary adder/subtractor\n• Parity generator/checker\n• Magnitude Comparator\n• Application using multiplexers', 'DD Lab: 5. Design and implement shift-registers.', 'DD Lab: 6. Design and implement synchronous counters.', 'DD Lab: 7. Design and implement asynchronous counters.', 'DD Lab: 8. Coding combinational circuits using HDL.', 'DD Lab: 9. Coding sequential circuits using HDL.', 'DD Lab: 10. Design and implementation of a simple digital system (Mini Project).']

['DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation', 'DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations)', 'DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of\npostfix expression)', 'DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs)', 'DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals', 'DSA Lab: 6. Implement AVL trees (e.g Implement dictionary)', 'DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary)', 'DSA Lab: 8. Graph representation and implement graph traversal algorithms', 'DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another)', 'DSA Lab: 10. Implement any two sorting algorithms', 'DSA Lab: 11. Implement hashing using separate chaining technique', 'DSA Lab: 12. Mini Project']

['OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation)', 'OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application)', 'OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes)', 'OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue)', 'OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation)', 'OOP Lab: 6. Program to implement packages (Eg: Currency converter)', 'OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting)', 'OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList)', 'OOP Lab: 9. Develop a mini project for any application using the constructs of Java.']

