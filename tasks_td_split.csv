,CONTENT,DATE,TYPE
0,Eng-I: Value Education (1/1),2023-09-07,task
1,OOP-I: Principles of OOP: Classes (1/2),2023-09-07,task
2,DD-I: Number Systems (1/2),2023-09-07,task
3,DD Lab: 1. Verification of Boolean Theorems using basic gates. (1/11),2023-09-07,task
4,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (1/9),2023-09-07,task
5,Math-I: Propositional Logic (1/3),2023-09-07,task
6,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (1/12),2023-09-07,task
7,DSA-I: Algorithm Analysis: Running time calculations (1/3),2023-09-07,task
8,Math-I: Propositional Logic (2/3),2023-09-08,task
9,OOP-I: Principles of OOP: Classes (2/2),2023-09-08,task
10,Eng-I: Need (1/2),2023-09-08,task
11,DSA-I: Algorithm Analysis: Running time calculations (2/3),2023-09-08,task
12,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (2/9),2023-09-08,task
13,DD Lab: 1. Verification of Boolean Theorems using basic gates. (2/11),2023-09-08,task
14,DD-I: Number Systems (2/2),2023-09-08,task
15,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (2/12),2023-09-08,task
16,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (3/9),2023-09-09,task
17,Math-I: Propositional Logic (3/3),2023-09-09,task
18,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (3/12),2023-09-09,task
19,DD-I: Arithmetic Operations (1/3),2023-09-09,task
20,OOP-I: Objects (1/2),2023-09-09,task
21,DD Lab: 1. Verification of Boolean Theorems using basic gates. (3/11),2023-09-09,task
22,DSA-I: Algorithm Analysis: Running time calculations (3/3),2023-09-09,task
23,Eng-I: Need (2/2),2023-09-09,task
24,Eng-I: Basic Guidelines (1/2),2023-09-10,task
25,DD Lab: 1. Verification of Boolean Theorems using basic gates. (4/11),2023-09-10,task
26,DSA-I: Abstract Data Types (ADTs) (1/3),2023-09-10,task
27,Math-I: Propositional equivalences (1/3),2023-09-10,task
28,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (4/12),2023-09-10,task
29,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (4/9),2023-09-10,task
30,OOP-I: Objects (2/2),2023-09-10,task
31,DD-I: Arithmetic Operations (2/3),2023-09-10,task
32,DD-I: Arithmetic Operations (3/3),2023-09-11,task
33,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (5/12),2023-09-11,task
34,Math-I: Propositional equivalences (2/3),2023-09-11,task
35,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (5/9),2023-09-11,task
36,Eng-I: Basic Guidelines (2/2),2023-09-11,task
37,OOP-I: Data hiding (1/2),2023-09-11,task
38,DD Lab: 1. Verification of Boolean Theorems using basic gates. (5/11),2023-09-11,task
39,DSA-I: Abstract Data Types (ADTs) (2/3),2023-09-11,task
40,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (6/12),2023-09-12,task
41,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (6/9),2023-09-12,task
42,DD Lab: 1. Verification of Boolean Theorems using basic gates. (6/11),2023-09-12,task
43,DSA-I: Abstract Data Types (ADTs) (3/3),2023-09-12,task
44,OOP-I: Data hiding (2/2),2023-09-12,task
45,Eng-I: Content and Process (1/2),2023-09-12,task
46,DD-I: Binary Codes (1/3),2023-09-12,task
47,Math-I: Propositional equivalences (3/3),2023-09-12,task
48,DD-I: Binary Codes (2/3),2023-09-13,task
49,DD Lab: 1. Verification of Boolean Theorems using basic gates. (7/11),2023-09-13,task
50,OOP-I: Data encapsulation (1/2),2023-09-13,task
51,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (7/12),2023-09-13,task
52,DSA-I: List ADT: Array implementation of lists (1/3),2023-09-13,task
53,Eng-I: Content and Process (2/2),2023-09-13,task
54,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (7/9),2023-09-13,task
55,Math-I: Predicates and quantifiers (1/3),2023-09-13,task
56,DSA-I: List ADT: Array implementation of lists (2/3),2023-09-14,task
57,DD-I: Binary Codes (3/3),2023-09-14,task
58,Eng-I: Self-Exploration (1/2),2023-09-14,task
59,OOP-I: Data encapsulation (2/2),2023-09-14,task
60,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (8/12),2023-09-14,task
61,DD Lab: 1. Verification of Boolean Theorems using basic gates. (8/11),2023-09-14,task
62,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (8/9),2023-09-14,task
63,Math-I: Predicates and quantifiers (2/3),2023-09-14,task
64,DD Lab: 1. Verification of Boolean Theorems using basic gates. (9/11),2023-09-15,task
65,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (9/9),2023-09-15,task
66,Math-I: Predicates and quantifiers (3/3),2023-09-15,task
67,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (9/12),2023-09-15,task
68,Eng-I: Self-Exploration (2/2),2023-09-15,task
69,OOP-I: Inheritance (1/2),2023-09-15,task
70,DSA-I: List ADT: Array implementation of lists (3/3),2023-09-15,task
71,DD-I: Boolean Algebra and Logic Gates (1/3),2023-09-15,task
72,Math-I: Nested quantifiers (1/3),2023-09-16,task
73,OOP-I: Inheritance (2/2),2023-09-16,task
74,DSA-I: Linked lists (1/3),2023-09-16,task
75,Eng-I: meaning (1/2),2023-09-16,task
76,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (1/10)",2023-09-16,task
77,DD-I: Boolean Algebra and Logic Gates (2/3),2023-09-16,task
78,DD Lab: 1. Verification of Boolean Theorems using basic gates. (10/11),2023-09-16,task
79,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (10/12),2023-09-16,task
80,DD-I: Boolean Algebra and Logic Gates (3/3),2023-09-17,task
81,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (2/10)",2023-09-17,task
82,Eng-I: meaning (2/2),2023-09-17,task
83,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (11/12),2023-09-17,task
84,Math-I: Nested quantifiers (2/3),2023-09-17,task
85,OOP-I: Poly- morphism (1/2),2023-09-17,task
86,DD Lab: 1. Verification of Boolean Theorems using basic gates. (11/11),2023-09-17,task
87,DSA-I: Linked lists (2/3),2023-09-17,task
88,Eng-I: importance and process (1/2),2023-09-18,task
89,Math-I: Nested quantifiers (3/3),2023-09-18,task
90,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (1/12)",2023-09-18,task
91,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (3/10)",2023-09-18,task
92,DSA-I: Linked lists (3/3),2023-09-18,task
93,OOP-I: Poly- morphism (2/2),2023-09-18,task
94,DD-I: Theorems and Properties of Boolean Algebra (1/2),2023-09-18,task
95,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (12/12),2023-09-18,task
96,Eng-I: importance and process (2/2),2023-09-19,task
97,OOP-I: Definition of Classes: Objects (1/3),2023-09-19,task
98,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (1/13),2023-09-19,task
99,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (2/12)",2023-09-19,task
100,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (4/10)",2023-09-19,task
101,Math-I: Rules of inference (1/3),2023-09-19,task
102,DSA-I: Circular linked lists (1/3),2023-09-19,task
103,DD-I: Theorems and Properties of Boolean Algebra (2/2),2023-09-19,task
104,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (2/13),2023-09-20,task
105,Math-I: Rules of inference (2/3),2023-09-20,task
106,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (3/12)",2023-09-20,task
107,DSA-I: Circular linked lists (2/3),2023-09-20,task
108,DD-I: Boolean Functions (1/3),2023-09-20,task
109,Eng-I: Continuous Happiness and Prosperity (1/1),2023-09-20,task
110,OOP-I: Definition of Classes: Objects (2/3),2023-09-20,task
111,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (5/10)",2023-09-20,task
112,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (3/13),2023-09-21,task
113,Math-I: Rules of inference (3/3),2023-09-21,task
114,OOP-I: Definition of Classes: Objects (3/3),2023-09-21,task
115,Eng-I: A look at basic Human Aspirations (1/2),2023-09-21,task
116,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (4/12)",2023-09-21,task
117,DSA-I: Circular linked lists (3/3),2023-09-21,task
118,DD-I: Boolean Functions (2/3),2023-09-21,task
119,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (6/10)",2023-09-21,task
120,DD-I: Boolean Functions (3/3),2023-09-22,task
121,Eng-I: A look at basic Human Aspirations (2/2),2023-09-22,task
122,Math-I: Introduction to proofs (1/3),2023-09-22,task
123,DSA-I: Doubly linked lists (1/3),2023-09-22,task
124,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (4/13),2023-09-22,task
125,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (5/12)",2023-09-22,task
126,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (7/10)",2023-09-22,task
127,OOP-I: Methods (1/2),2023-09-22,task
128,DD-I: Canonical and Standard Forms (1/3),2023-09-23,task
129,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (6/12)",2023-09-23,task
130,DSA-I: Doubly linked lists (2/3),2023-09-23,task
131,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (5/13),2023-09-23,task
132,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (8/10)",2023-09-23,task
133,Math-I: Introduction to proofs (2/3),2023-09-23,task
134,Eng-I: Right understanding (1/2),2023-09-23,task
135,OOP-I: Methods (2/2),2023-09-23,task
136,Eng-I: Right understanding (2/2),2023-09-24,task
137,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (9/10)",2023-09-24,task
138,DSA-I: Doubly linked lists (3/3),2023-09-24,task
139,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (6/13),2023-09-24,task
140,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (7/12)",2023-09-24,task
141,Math-I: Introduction to proofs (3/3),2023-09-24,task
142,OOP-I: Access specifiers (1/2),2023-09-24,task
143,DD-I: Canonical and Standard Forms (2/3),2023-09-24,task
144,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (7/13),2023-09-25,task
145,DSA-I: Applications of Lists: Polynomial manipulation.  (1/3),2023-09-25,task
146,DD-I: Canonical and Standard Forms (3/3),2023-09-25,task
147,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (8/12)",2023-09-25,task
148,OOP-I: Access specifiers (2/2),2023-09-25,task
149,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (10/10)",2023-09-25,task
150,Math-I: Proof methods and strategy (1/3),2023-09-25,task
151,Eng-I: Relationship and Physical Facilities (1/2),2023-09-25,task
152,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (9/12)",2023-09-26,task
153,DD-I: Simplification of Boolean Functions using Karnaugh Map (1/3),2023-09-26,task
154,OOP-I: Static and final classes and members (1/2),2023-09-26,task
155,DSA-I: Applications of Lists: Polynomial manipulation.  (2/3),2023-09-26,task
156,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (8/13),2023-09-26,task
157,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (1/10)",2023-09-26,task
158,Math-I: Proof methods and strategy (2/3),2023-09-26,task
159,Eng-I: Relationship and Physical Facilities (2/2),2023-09-26,task
160,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (9/13),2023-09-27,task
161,Eng-I: The basic requirements (1/2),2023-09-27,task
162,DD-I: Simplification of Boolean Functions using Karnaugh Map (2/3),2023-09-27,task
163,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (2/10)",2023-09-27,task
164,Math-I: Proof methods and strategy (3/3),2023-09-27,task
165,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (10/12)",2023-09-27,task
166,DSA-I: Applications of Lists: Polynomial manipulation.  (3/3),2023-09-27,task
167,OOP-I: Static and final classes and members (2/2),2023-09-27,task
168,DSA-II: Stack ADT: Stack model (1/3),2023-09-28,task
169,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (11/12)",2023-09-28,task
170,Math-I: Normal forms (1/3),2023-09-28,task
171,OOP-I: Object Construction and Destruction (1/2),2023-09-28,task
172,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (3/10)",2023-09-28,task
173,DD-I: Simplification of Boolean Functions using Karnaugh Map (3/3),2023-09-28,task
174,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (10/13),2023-09-28,task
175,Eng-I: The basic requirements (2/2),2023-09-28,task
176,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (4/10)",2023-09-29,task
177,DSA-II: Stack ADT: Stack model (2/3),2023-09-29,task
178,Math-I: Normal forms (2/3),2023-09-29,task
179,DD-I: Logic Gates (1/2),2023-09-29,task
180,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (11/13),2023-09-29,task
181,Eng-I: Understanding Happiness and Prosperity (1/2),2023-09-29,task
182,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (12/12)",2023-09-29,task
183,OOP-I: Object Construction and Destruction (2/2),2023-09-29,task
184,DD Lab: 3. Design and implement half/full adder and subtractor. (1/11),2023-09-30,task
185,DD-I: Logic Gates (2/2),2023-09-30,task
186,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (5/10)",2023-09-30,task
187,OOP-I: Fundamental programming structures in Java (1/2),2023-09-30,task
188,Eng-I: Understanding Happiness and Prosperity (2/2),2023-09-30,task
189,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (12/13),2023-09-30,task
190,Math-I: Normal forms (3/3),2023-09-30,task
191,DSA-II: Stack ADT: Stack model (3/3),2023-09-30,task
192,Eng-I: A critical appraisal of the current scenario (1/2),2023-10-01,task
193,Math-I: Applications to switching circuits.  (1/3),2023-10-01,task
194,DD Lab: 3. Design and implement half/full adder and subtractor. (2/11),2023-10-01,task
195,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (13/13),2023-10-01,task
196,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (6/10)",2023-10-01,task
197,OOP-I: Fundamental programming structures in Java (2/2),2023-10-01,task
198,DD-I: NAND and NOR Implementations.  (1/3),2023-10-01,task
199,DSA-II: Implementation of stacks (1/3),2023-10-01,task
200,Math-I: Applications to switching circuits.  (2/3),2023-10-02,task
201,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (7/10)",2023-10-02,task
202,DD-I: NAND and NOR Implementations.  (2/3),2023-10-02,task
203,Eng-I: A critical appraisal of the current scenario (2/2),2023-10-02,task
204,OOP-I: Streams: Input (1/2),2023-10-02,task
205,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (1/13),2023-10-02,task
206,DD Lab: 3. Design and implement half/full adder and subtractor. (3/11),2023-10-02,task
207,DSA-II: Implementation of stacks (2/3),2023-10-02,task
208,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (2/13),2023-10-03,task
209,DSA-II: Implementation of stacks (3/3),2023-10-03,task
210,Eng-I: Method to fulfil the above human aspirations (1/2),2023-10-03,task
211,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (8/10)",2023-10-03,task
212,DD Lab: 3. Design and implement half/full adder and subtractor. (4/11),2023-10-03,task
213,Math-I: Applications to switching circuits.  (3/3),2023-10-03,task
214,DD-I: NAND and NOR Implementations.  (3/3),2023-10-03,task
215,OOP-I: Streams: Input (2/2),2023-10-03,task
216,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (9/10)",2023-10-04,task
217,DD Lab: 3. Design and implement half/full adder and subtractor. (5/11),2023-10-04,task
218,DSA-II: Applications: Balancing symbols (1/3),2023-10-04,task
219,Math-II: Mathematical induction (1/3),2023-10-04,task
220,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (3/13),2023-10-04,task
221,DD-II: Combinational Circuits (1/3),2023-10-04,task
222,Eng-I: Method to fulfil the above human aspirations (2/2),2023-10-04,task
223,OOP-I: Output (1/3),2023-10-04,task
224,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (10/10)",2023-10-05,task
225,Math-II: Mathematical induction (2/3),2023-10-05,task
226,OOP-I: Output (2/3),2023-10-05,task
227,DD Lab: 3. Design and implement half/full adder and subtractor. (6/11),2023-10-05,task
228,DD-II: Combinational Circuits (2/3),2023-10-05,task
229,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (4/13),2023-10-05,task
230,DSA-II: Applications: Balancing symbols (2/3),2023-10-05,task
231,Eng-I: UNDERSTANDING and living in harmony at various levels.  (1/1),2023-10-05,task
232,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (5/13),2023-10-06,task
233,DD-II: Combinational Circuits (3/3),2023-10-06,task
234,Eng-II: An understanding human being as a co-existence of the sentient ‘I’ and the material ‘Body’ (1/2),2023-10-06,task
235,OOP-I: Output (3/3),2023-10-06,task
236,DD Lab: 3. Design and implement half/full adder and subtractor. (7/11),2023-10-06,task
237,DSA-II: Applications: Balancing symbols (3/3),2023-10-06,task
238,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (1/9),2023-10-06,task
239,Math-II: Mathematical induction (3/3),2023-10-06,task
240,OOP-I: String handling (1/2),2023-10-07,task
241,DD-II: Analysis and Design Procedures (1/3),2023-10-07,task
242,Eng-II: An understanding human being as a co-existence of the sentient ‘I’ and the material ‘Body’ (2/2),2023-10-07,task
243,DD Lab: 3. Design and implement half/full adder and subtractor. (8/11),2023-10-07,task
244,DSA-II: Infix to postfix conversion (1/3),2023-10-07,task
245,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (6/13),2023-10-07,task
246,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (2/9),2023-10-07,task
247,Math-II: Strong induction (1/3),2023-10-07,task
248,DD-II: Analysis and Design Procedures (2/3),2023-10-08,task
249,DD Lab: 3. Design and implement half/full adder and subtractor. (9/11),2023-10-08,task
250,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (3/9),2023-10-08,task
251,Math-II: Strong induction (2/3),2023-10-08,task
252,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (7/13),2023-10-08,task
253,DSA-II: Infix to postfix conversion (2/3),2023-10-08,task
254,Eng-II: Understanding the needs of Self (‘I’) and ‘Body’ (1/2),2023-10-08,task
255,OOP-I: String handling (2/2),2023-10-08,task
256,Math-II: Strong induction (3/3),2023-10-09,task
257,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (4/9),2023-10-09,task
258,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (8/13),2023-10-09,task
259,Eng-II: Understanding the needs of Self (‘I’) and ‘Body’ (2/2),2023-10-09,task
260,OOP-I: Examples in Java.  (1/2),2023-10-09,task
261,DD-II: Analysis and Design Procedures (3/3),2023-10-09,task
262,DSA-II: Infix to postfix conversion (3/3),2023-10-09,task
263,DD Lab: 3. Design and implement half/full adder and subtractor. (10/11),2023-10-09,task
264,Math-II: The pigeonhole principle (1/3),2023-10-10,task
265,DD Lab: 3. Design and implement half/full adder and subtractor. (11/11),2023-10-10,task
266,Eng-II: Sukh and Suvidha (1/2),2023-10-10,task
267,DSA-II: Evaluating postfix expressions (1/3),2023-10-10,task
268,DD-II: Binary Adder (1/2),2023-10-10,task
269,OOP-I: Examples in Java.  (2/2),2023-10-10,task
270,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (5/9),2023-10-10,task
271,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (9/13),2023-10-10,task
272,OOP-II: Inheritance: Definition (1/2),2023-10-11,task
273,DD-II: Binary Adder (2/2),2023-10-11,task
274,DSA-II: Evaluating postfix expressions (2/3),2023-10-11,task
275,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (1/12)",2023-10-11,task
276,Eng-II: Sukh and Suvidha (2/2),2023-10-11,task
277,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (6/9),2023-10-11,task
278,Math-II: The pigeonhole principle (2/3),2023-10-11,task
279,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (10/13),2023-10-11,task
280,Math-II: The pigeonhole principle (3/3),2023-10-12,task
281,OOP-II: Inheritance: Definition (2/2),2023-10-12,task
282,Eng-II: Understanding the Body as an instrument of ‘I’ (I being the doer (1/2),2023-10-12,task
283,DD-II: Subtractor (1/3),2023-10-12,task
284,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (7/9),2023-10-12,task
285,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (2/12)",2023-10-12,task
286,DSA-II: Evaluating postfix expressions (3/3),2023-10-12,task
287,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (11/13),2023-10-12,task
288,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (12/13),2023-10-13,task
289,Eng-II: Understanding the Body as an instrument of ‘I’ (I being the doer (2/2),2023-10-13,task
290,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (3/12)",2023-10-13,task
291,OOP-II: Types of inheritance: Single (1/2),2023-10-13,task
292,DSA-II: Function calls (1/3),2023-10-13,task
293,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (8/9),2023-10-13,task
294,Math-II: Recurrence relations (1/3),2023-10-13,task
295,DD-II: Subtractor (2/3),2023-10-13,task
296,DSA-II: Function calls (2/3),2023-10-14,task
297,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (13/13),2023-10-14,task
298,DD-II: Subtractor (3/3),2023-10-14,task
299,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (9/9),2023-10-14,task
300,Math-II: Recurrence relations (2/3),2023-10-14,task
301,OOP-II: Types of inheritance: Single (2/2),2023-10-14,task
302,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (4/12)",2023-10-14,task
303,Eng-II: seer and enjoyer) (1/2),2023-10-14,task
304,DSA-II: Function calls (3/3),2023-10-15,task
305,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (5/12)",2023-10-15,task
306,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (1/13)",2023-10-15,task
307,Math-II: Recurrence relations (3/3),2023-10-15,task
308,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (1/10)",2023-10-15,task
309,Eng-II: seer and enjoyer) (2/2),2023-10-15,task
310,OOP-II: Multilevel (1/2),2023-10-15,task
311,DD-II: Decimal Adder (1/3),2023-10-15,task
312,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (6/12)",2023-10-16,task
313,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (2/13)",2023-10-16,task
314,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (2/10)",2023-10-16,task
315,Math-II: Partition of integers (1/3),2023-10-16,task
316,OOP-II: Multilevel (2/2),2023-10-16,task
317,Eng-II: Understanding the characteristics and activities of ‘I’ and harmony in ‘I’ (1/2),2023-10-16,task
318,DSA-II: Queue ADT: Queue model (1/3),2023-10-16,task
319,DD-II: Decimal Adder (2/3),2023-10-16,task
320,DD-II: Decimal Adder (3/3),2023-10-17,task
321,OOP-II: Multiple (1/2),2023-10-17,task
322,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (3/10)",2023-10-17,task
323,Eng-II: Understanding the characteristics and activities of ‘I’ and harmony in ‘I’ (2/2),2023-10-17,task
324,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (7/12)",2023-10-17,task
325,DSA-II: Queue ADT: Queue model (2/3),2023-10-17,task
326,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (3/13)",2023-10-17,task
327,Math-II: Partition of integers (2/3),2023-10-17,task
328,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (4/10)",2023-10-18,task
329,DSA-II: Queue ADT: Queue model (3/3),2023-10-18,task
330,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (4/13)",2023-10-18,task
331,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (8/12)",2023-10-18,task
332,Eng-II: Understanding the harmony of I with the Body: Sanyam and Swasthya (1/2),2023-10-18,task
333,OOP-II: Multiple (2/2),2023-10-18,task
334,DD-II: Binary Multiplier (1/3),2023-10-18,task
335,Math-II: Partition of integers (3/3),2023-10-18,task
336,Eng-II: Understanding the harmony of I with the Body: Sanyam and Swasthya (2/2),2023-10-19,task
337,Math-II: Solving linear recurrence relations using generating functions (1/3),2023-10-19,task
338,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (5/10)",2023-10-19,task
339,DSA-II: Array implementation of queues (1/3),2023-10-19,task
340,OOP-II: Hierarchical (1/3),2023-10-19,task
341,DD-II: Binary Multiplier (2/3),2023-10-19,task
342,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (5/13)",2023-10-19,task
343,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (9/12)",2023-10-19,task
344,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (10/12)",2023-10-20,task
345,OOP-II: Hierarchical (2/3),2023-10-20,task
346,DSA-II: Array implementation of queues (2/3),2023-10-20,task
347,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (6/10)",2023-10-20,task
348,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (6/13)",2023-10-20,task
349,DD-II: Binary Multiplier (3/3),2023-10-20,task
350,Eng-II: correct appraisal of Physical needs (1/1),2023-10-20,task
351,Math-II: Solving linear recurrence relations using generating functions (2/3),2023-10-20,task
352,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (7/13)",2023-10-21,task
353,DD-II: Magnitude Comparator (1/2),2023-10-21,task
354,OOP-II: Hierarchical (3/3),2023-10-21,task
355,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (7/10)",2023-10-21,task
356,Math-II: Solving linear recurrence relations using generating functions (3/3),2023-10-21,task
357,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (11/12)",2023-10-21,task
358,DSA-II: Array implementation of queues (3/3),2023-10-21,task
359,Eng-II: the meaning of Prosperity in detail (1/2),2023-10-21,task
360,DD-II: Magnitude Comparator (2/2),2023-10-22,task
361,DSA-II: Applications of queues.  (1/3),2023-10-22,task
362,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (8/13)",2023-10-22,task
363,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (8/10)",2023-10-22,task
364,Math-II: Inclusion and Exclusion Principle and its applications.  (1/3),2023-10-22,task
365,Eng-II: the meaning of Prosperity in detail (2/2),2023-10-22,task
366,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (12/12)",2023-10-22,task
367,OOP-II: Subclass constructors (1/2),2023-10-22,task
368,DSA-II: Applications of queues.  (2/3),2023-10-23,task
369,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (9/10)",2023-10-23,task
370,DD-II: Decoders (1/3),2023-10-23,task
371,Math-II: Inclusion and Exclusion Principle and its applications.  (2/3),2023-10-23,task
372,Eng-II: Pro- grams to ensure Sanyam and Swasthya.  (1/2),2023-10-23,task
373,DD Lab: 5. Design and implement shift-registers. (1/12),2023-10-23,task
374,OOP-II: Subclass constructors (2/2),2023-10-23,task
375,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (9/13)",2023-10-23,task
376,DD-II: Decoders (2/3),2023-10-24,task
377,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (10/10)",2023-10-24,task
378,DD Lab: 5. Design and implement shift-registers. (2/12),2023-10-24,task
379,Math-II: Inclusion and Exclusion Principle and its applications.  (3/3),2023-10-24,task
380,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (10/13)",2023-10-24,task
381,DSA-II: Applications of queues.  (3/3),2023-10-24,task
382,Eng-II: Pro- grams to ensure Sanyam and Swasthya.  (2/2),2023-10-24,task
383,OOP-II: Interfaces in Java: Definition (1/2),2023-10-24,task
384,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (1/10),2023-10-25,task
385,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (11/13)",2023-10-25,task
386,DD-II: Decoders (3/3),2023-10-25,task
387,OOP-II: Interfaces in Java: Definition (2/2),2023-10-25,task
388,Math-III: Graphs (1/3),2023-10-25,task
389,DSA-III: Preliminaries (1/3),2023-10-25,task
390,Eng-III: Understanding harmony in the family (1/2),2023-10-25,task
391,DD Lab: 5. Design and implement shift-registers. (3/12),2023-10-25,task
392,DSA-III: Preliminaries (2/3),2023-10-26,task
393,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (2/10),2023-10-26,task
394,Eng-III: Understanding harmony in the family (2/2),2023-10-26,task
395,Math-III: Graphs (2/3),2023-10-26,task
396,DD-II: Encoders (1/3),2023-10-26,task
397,DD Lab: 5. Design and implement shift-registers. (4/12),2023-10-26,task
398,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (12/13)",2023-10-26,task
399,OOP-II: Implementation (1/2),2023-10-26,task
400,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (3/10),2023-10-27,task
401,DD-II: Encoders (2/3),2023-10-27,task
402,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (13/13)",2023-10-27,task
403,DD Lab: 5. Design and implement shift-registers. (5/12),2023-10-27,task
404,Math-III: Graphs (3/3),2023-10-27,task
405,DSA-III: Preliminaries (3/3),2023-10-27,task
406,OOP-II: Implementation (2/2),2023-10-27,task
407,Eng-III: The basic unit of human interaction (1/2),2023-10-27,task
408,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (1/13),2023-10-28,task
409,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (4/10),2023-10-28,task
410,Math-III: Graph terminology and special types of graphs (1/3),2023-10-28,task
411,DD-II: Encoders (3/3),2023-10-28,task
412,OOP-II: Extending interfaces (1/2),2023-10-28,task
413,Eng-III: The basic unit of human interaction (2/2),2023-10-28,task
414,DSA-III: Binary trees: Expression trees (1/3),2023-10-28,task
415,DD Lab: 5. Design and implement shift-registers. (6/12),2023-10-28,task
416,DD Lab: 5. Design and implement shift-registers. (7/12),2023-10-29,task
417,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (2/13),2023-10-29,task
418,DD-II: Multiplexers (1/3),2023-10-29,task
419,DSA-III: Binary trees: Expression trees (2/3),2023-10-29,task
420,Math-III: Graph terminology and special types of graphs (2/3),2023-10-29,task
421,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (5/10),2023-10-29,task
422,OOP-II: Extending interfaces (2/2),2023-10-29,task
423,Eng-III: understanding values in a human-to-human relationship (1/2),2023-10-29,task
424,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (3/13),2023-10-30,task
425,DSA-III: Binary trees: Expression trees (3/3),2023-10-30,task
426,DD Lab: 5. Design and implement shift-registers. (8/12),2023-10-30,task
427,DD-II: Multiplexers (2/3),2023-10-30,task
428,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (6/10),2023-10-30,task
429,OOP-II: Inheritance versus delegation (1/2),2023-10-30,task
430,Eng-III: understanding values in a human-to-human relationship (2/2),2023-10-30,task
431,Math-III: Graph terminology and special types of graphs (3/3),2023-10-30,task
432,Math-III: Subgraphs (1/4),2023-10-31,task
433,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (4/13),2023-10-31,task
434,DD-II: Multiplexers (3/3),2023-10-31,task
435,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (7/10),2023-10-31,task
436,OOP-II: Inheritance versus delegation (2/2),2023-10-31,task
437,DD Lab: 5. Design and implement shift-registers. (9/12),2023-10-31,task
438,Eng-III: Understanding Trust (1/2),2023-10-31,task
439,DSA-III: Binary search tree ADT (1/4),2023-10-31,task
440,OOP-II: Inheritance rules (1/3),2023-11-01,task
441,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (5/13),2023-11-01,task
442,DD-II: Introduction to HDL (1/3),2023-11-01,task
443,Math-III: Subgraphs (2/4),2023-11-01,task
444,DSA-III: Binary search tree ADT (2/4),2023-11-01,task
445,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (8/10),2023-11-01,task
446,Eng-III: Understanding Trust (2/2),2023-11-01,task
447,DD Lab: 5. Design and implement shift-registers. (10/12),2023-11-01,task
448,DD Lab: 5. Design and implement shift-registers. (11/12),2023-11-02,task
449,OOP-II: Inheritance rules (2/3),2023-11-02,task
450,DD-II: Introduction to HDL (2/3),2023-11-02,task
451,Eng-III: The foundational value in relationship (1/2),2023-11-02,task
452,Math-III: Subgraphs (3/4),2023-11-02,task
453,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (6/13),2023-11-02,task
454,DSA-III: Binary search tree ADT (3/4),2023-11-02,task
455,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (9/10),2023-11-02,task
456,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (10/10),2023-11-03,task
457,Eng-III: The foundational value in relationship (2/2),2023-11-03,task
458,DD Lab: 5. Design and implement shift-registers. (12/12),2023-11-03,task
459,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (7/13),2023-11-03,task
460,Math-III: Subgraphs (4/4),2023-11-03,task
461,OOP-II: Inheritance rules (3/3),2023-11-03,task
462,DD-II: Introduction to HDL (3/3),2023-11-03,task
463,DSA-III: Binary search tree ADT (4/4),2023-11-03,task
464,Math-III: Matrix representation of graphs and graph isomorphism (1/3),2023-11-04,task
465,OOP-II: Inner classes (1/2),2023-11-04,task
466,DSA-III: AVL trees (1/3),2023-11-04,task
467,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (1/9),2023-11-04,task
468,DD-II: HDL Models of Combinational circuits.  (1/2),2023-11-04,task
469,DD Lab: 6. Design and implement synchronous counters. (1/11),2023-11-04,task
470,Eng-III: Difference between intention and competence (1/1),2023-11-04,task
471,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (8/13),2023-11-04,task
472,Math-III: Matrix representation of graphs and graph isomorphism (2/3),2023-11-05,task
473,DD Lab: 6. Design and implement synchronous counters. (2/11),2023-11-05,task
474,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (2/9),2023-11-05,task
475,DD-II: HDL Models of Combinational circuits.  (2/2),2023-11-05,task
476,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (9/13),2023-11-05,task
477,DSA-III: AVL trees (2/3),2023-11-05,task
478,OOP-II: Inner classes (2/2),2023-11-05,task
479,Eng-III: Understanding Respect (1/2),2023-11-05,task
480,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (3/9),2023-11-06,task
481,DSA-III: AVL trees (3/3),2023-11-06,task
482,OOP-II: Examples in Java.  (1/2),2023-11-06,task
483,Math-III: Matrix representation of graphs and graph isomorphism (3/3),2023-11-06,task
484,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (10/13),2023-11-06,task
485,DD-III: Sequential Circuits (1/3),2023-11-06,task
486,DD Lab: 6. Design and implement synchronous counters. (3/11),2023-11-06,task
487,Eng-III: Understanding Respect (2/2),2023-11-06,task
488,Math-III: Connectivity (1/3),2023-11-07,task
489,DD Lab: 6. Design and implement synchronous counters. (4/11),2023-11-07,task
490,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (11/13),2023-11-07,task
491,DSA-III: Tree traversals (1/3),2023-11-07,task
492,Eng-III: as the right evaluation (1/2),2023-11-07,task
493,OOP-II: Examples in Java.  (2/2),2023-11-07,task
494,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (4/9),2023-11-07,task
495,DD-III: Sequential Circuits (2/3),2023-11-07,task
496,DSA-III: Tree traversals (2/3),2023-11-08,task
497,DD Lab: 6. Design and implement synchronous counters. (5/11),2023-11-08,task
498,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (5/9),2023-11-08,task
499,OOP-III: Polymorphism: Method overloading and overriding (1/2),2023-11-08,task
500,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (12/13),2023-11-08,task
501,Eng-III: as the right evaluation (2/2),2023-11-08,task
502,Math-III: Connectivity (2/3),2023-11-08,task
503,DD-III: Sequential Circuits (3/3),2023-11-08,task
504,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (13/13),2023-11-09,task
505,DD Lab: 6. Design and implement synchronous counters. (6/11),2023-11-09,task
506,OOP-III: Polymorphism: Method overloading and overriding (2/2),2023-11-09,task
507,DSA-III: Tree traversals (3/3),2023-11-09,task
508,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (6/9),2023-11-09,task
509,DD-III: Storage Elements: Latches (1/3),2023-11-09,task
510,Math-III: Connectivity (3/3),2023-11-09,task
511,Eng-III: Difference between respect and differentiation (1/2),2023-11-09,task
512,OOP-III: Dynamic method dispatch (1/2),2023-11-10,task
513,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (1/13),2023-11-10,task
514,Eng-III: Difference between respect and differentiation (2/2),2023-11-10,task
515,DD Lab: 6. Design and implement synchronous counters. (7/11),2023-11-10,task
516,Math-III: Eulerian and Hamilton graphs.  (1/3),2023-11-10,task
517,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (7/9),2023-11-10,task
518,DSA-III: B- Trees (1/3),2023-11-10,task
519,DD-III: Storage Elements: Latches (2/3),2023-11-10,task
520,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (2/13),2023-11-11,task
521,DSA-III: B- Trees (2/3),2023-11-11,task
522,DD-III: Storage Elements: Latches (3/3),2023-11-11,task
523,Eng-III: the other salient values in a relationship (1/2),2023-11-11,task
524,Math-III: Eulerian and Hamilton graphs.  (2/3),2023-11-11,task
525,OOP-III: Dynamic method dispatch (2/2),2023-11-11,task
526,DD Lab: 6. Design and implement synchronous counters. (8/11),2023-11-11,task
527,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (8/9),2023-11-11,task
528,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (3/13),2023-11-12,task
529,DD-III: Flip (1/3),2023-11-12,task
530,Eng-III: the other salient values in a relationship (2/2),2023-11-12,task
531,DD Lab: 6. Design and implement synchronous counters. (9/11),2023-11-12,task
532,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (9/9),2023-11-12,task
533,Math-III: Eulerian and Hamilton graphs.  (3/3),2023-11-12,task
534,DSA-III: B- Trees (3/3),2023-11-12,task
535,OOP-III: Exceptions: Hierarchy (1/2),2023-11-12,task
536,Eng-III: Understanding the harmony in the society (1/2),2023-11-13,task
537,Math-IV: Algebraic systems (1/3),2023-11-13,task
538,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (4/13),2023-11-13,task
539,DSA-III: Priority Queues: Binary heap.  (1/3),2023-11-13,task
540,DD Lab: 6. Design and implement synchronous counters. (10/11),2023-11-13,task
541,OOP-III: Exceptions: Hierarchy (2/2),2023-11-13,task
542,DD-III: Flip (2/3),2023-11-13,task
543,DSA Lab: 8. Graph representation and implement graph traversal algorithms (1/10),2023-11-13,task
544,DSA-III: Priority Queues: Binary heap.  (2/3),2023-11-14,task
545,Math-IV: Algebraic systems (2/3),2023-11-14,task
546,Eng-III: Understanding the harmony in the society (2/2),2023-11-14,task
547,DD-III: Flip (3/3),2023-11-14,task
548,DD Lab: 6. Design and implement synchronous counters. (11/11),2023-11-14,task
549,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (5/13),2023-11-14,task
550,DSA Lab: 8. Graph representation and implement graph traversal algorithms (2/10),2023-11-14,task
551,OOP-III: Built-in exceptions (1/2),2023-11-14,task
552,DD-III: Flops (1/2),2023-11-15,task
553,DD Lab: 7. Design and implement asynchronous counters. (1/12),2023-11-15,task
554,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (6/13),2023-11-15,task
555,DSA-III: Priority Queues: Binary heap.  (3/3),2023-11-15,task
556,OOP-III: Built-in exceptions (2/2),2023-11-15,task
557,DSA Lab: 8. Graph representation and implement graph traversal algorithms (3/10),2023-11-15,task
558,Math-IV: Algebraic systems (3/3),2023-11-15,task
559,Eng-III: comprehensive Human Goals (1/2),2023-11-15,task
560,Eng-III: comprehensive Human Goals (2/2),2023-11-16,task
561,OOP-III: Creating own exception (1/3),2023-11-16,task
562,DSA-IV: Graph Algorithms: Definitions (1/3),2023-11-16,task
563,DSA Lab: 8. Graph representation and implement graph traversal algorithms (4/10),2023-11-16,task
564,DD-III: Flops (2/2),2023-11-16,task
565,Math-IV: Semi groups and monoids (1/3),2023-11-16,task
566,DD Lab: 7. Design and implement asynchronous counters. (2/12),2023-11-16,task
567,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (7/13),2023-11-16,task
568,OOP-III: Creating own exception (2/3),2023-11-17,task
569,DSA-IV: Graph Algorithms: Definitions (2/3),2023-11-17,task
570,Math-IV: Semi groups and monoids (2/3),2023-11-17,task
571,DD Lab: 7. Design and implement asynchronous counters. (3/12),2023-11-17,task
572,DSA Lab: 8. Graph representation and implement graph traversal algorithms (5/10),2023-11-17,task
573,Eng-III: Visualizing a universal harmonious order in society (1/1),2023-11-17,task
574,DD-III: Analysis of Clocked Sequential Circuits (1/3),2023-11-17,task
575,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (8/13),2023-11-17,task
576,Math-IV: Semi groups and monoids (3/3),2023-11-18,task
577,DSA Lab: 8. Graph representation and implement graph traversal algorithms (6/10),2023-11-18,task
578,DD Lab: 7. Design and implement asynchronous counters. (4/12),2023-11-18,task
579,OOP-III: Creating own exception (3/3),2023-11-18,task
580,DSA-IV: Graph Algorithms: Definitions (3/3),2023-11-18,task
581,DD-III: Analysis of Clocked Sequential Circuits (2/3),2023-11-18,task
582,Eng-III: Undivided Society (1/2),2023-11-18,task
583,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (9/13),2023-11-18,task
584,DSA-IV: Representation of graphs (1/3),2023-11-19,task
585,DSA Lab: 8. Graph representation and implement graph traversal algorithms (7/10),2023-11-19,task
586,Math-IV: Groups (1/3),2023-11-19,task
587,OOP-III: Packages in Java (1/2),2023-11-19,task
588,Eng-III: Undivided Society (2/2),2023-11-19,task
589,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (10/13),2023-11-19,task
590,DD Lab: 7. Design and implement asynchronous counters. (5/12),2023-11-19,task
591,DD-III: Analysis of Clocked Sequential Circuits (3/3),2023-11-19,task
592,DSA Lab: 8. Graph representation and implement graph traversal algorithms (8/10),2023-11-20,task
593,Eng-III: Universal Order (1/2),2023-11-20,task
594,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (11/13),2023-11-20,task
595,OOP-III: Packages in Java (2/2),2023-11-20,task
596,DSA-IV: Representation of graphs (2/3),2023-11-20,task
597,Math-IV: Groups (2/3),2023-11-20,task
598,DD Lab: 7. Design and implement asynchronous counters. (6/12),2023-11-20,task
599,DD-III: State Reduction and Assignment (1/3),2023-11-20,task
600,OOP-III: Examples in Java.  (1/2),2023-11-21,task
601,Math-IV: Groups (3/3),2023-11-21,task
602,DD-III: State Reduction and Assignment (2/3),2023-11-21,task
603,DSA Lab: 8. Graph representation and implement graph traversal algorithms (9/10),2023-11-21,task
604,DSA-IV: Representation of graphs (3/3),2023-11-21,task
605,Eng-III: Universal Order (2/2),2023-11-21,task
606,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (12/13),2023-11-21,task
607,DD Lab: 7. Design and implement asynchronous counters. (7/12),2023-11-21,task
608,Math-IV: Subgroups Homomorphisms (1/3),2023-11-22,task
609,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (13/13),2023-11-22,task
610,OOP-III: Examples in Java.  (2/2),2023-11-22,task
611,DSA-IV: Graph Traversals: Breadth-first traversal (1/3),2023-11-22,task
612,Eng-III: From family to world family!  (1/2),2023-11-22,task
613,DD-III: State Reduction and Assignment (3/3),2023-11-22,task
614,DSA Lab: 8. Graph representation and implement graph traversal algorithms (10/10),2023-11-22,task
615,DD Lab: 7. Design and implement asynchronous counters. (8/12),2023-11-22,task
616,Math-IV: Subgroups Homomorphisms (2/3),2023-11-23,task
617,DD Lab: 7. Design and implement asynchronous counters. (9/12),2023-11-23,task
618,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (1/10),2023-11-23,task
619,Eng-III: From family to world family!  (2/2),2023-11-23,task
620,DD-III: Design Procedure (1/3),2023-11-23,task
621,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (1/13)",2023-11-23,task
622,OOP-IV: Definition and concepts: Generic classes and generic methods (1/2),2023-11-23,task
623,DSA-IV: Graph Traversals: Breadth-first traversal (2/3),2023-11-23,task
624,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (2/10),2023-11-24,task
625,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (2/13)",2023-11-24,task
626,DSA-IV: Graph Traversals: Breadth-first traversal (3/3),2023-11-24,task
627,Eng-IV: Understanding the harmony in Nature (1/2),2023-11-24,task
628,OOP-IV: Definition and concepts: Generic classes and generic methods (2/2),2023-11-24,task
629,DD-III: Design Procedure (2/3),2023-11-24,task
630,DD Lab: 7. Design and implement asynchronous counters. (10/12),2023-11-24,task
631,Math-IV: Subgroups Homomorphisms (3/3),2023-11-24,task
632,DD Lab: 7. Design and implement asynchronous counters. (11/12),2023-11-25,task
633,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (3/10),2023-11-25,task
634,Eng-IV: Understanding the harmony in Nature (2/2),2023-11-25,task
635,DSA-IV: Depth-first traversal (1/3),2023-11-25,task
636,Math-IV: Normal subgroup and coset (1/3),2023-11-25,task
637,DD-III: Design Procedure (3/3),2023-11-25,task
638,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (3/13)",2023-11-25,task
639,OOP-IV: Generic types (1/2),2023-11-25,task
640,DD-III: Registers and Counters (1/2),2023-11-26,task
641,DSA-IV: Depth-first traversal (2/3),2023-11-26,task
642,Eng-IV: Interconnectedness (1/2),2023-11-26,task
643,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (4/10),2023-11-26,task
644,OOP-IV: Generic types (2/2),2023-11-26,task
645,DD Lab: 7. Design and implement asynchronous counters. (12/12),2023-11-26,task
646,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (4/13)",2023-11-26,task
647,Math-IV: Normal subgroup and coset (2/3),2023-11-26,task
648,DD Lab: 8. Coding combinational circuits using HDL. (1/11),2023-11-27,task
649,DSA-IV: Depth-first traversal (3/3),2023-11-27,task
650,OOP-IV: Restrictions and limitations (1/2),2023-11-27,task
651,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (5/13)",2023-11-27,task
652,Math-IV: Normal subgroup and coset (3/3),2023-11-27,task
653,DD-III: Registers and Counters (2/2),2023-11-27,task
654,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (5/10),2023-11-27,task
655,Eng-IV: Interconnectedness (2/2),2023-11-27,task
656,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (6/13)",2023-11-28,task
657,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (6/10),2023-11-28,task
658,Eng-IV: self-regulation and mutual fulfilment among the four orders of nature (1/2),2023-11-28,task
659,Math-IV: Lagrange’s theorem (1/3),2023-11-28,task
660,DSA-IV: Topological sort (1/3),2023-11-28,task
661,DD-III: HDL Models of Sequential Circuits.  (1/3),2023-11-28,task
662,OOP-IV: Restrictions and limitations (2/2),2023-11-28,task
663,DD Lab: 8. Coding combinational circuits using HDL. (2/11),2023-11-28,task
664,OOP-IV: Inheritance rules for generic types (1/2),2023-11-29,task
665,Eng-IV: self-regulation and mutual fulfilment among the four orders of nature (2/2),2023-11-29,task
666,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (7/10),2023-11-29,task
667,Math-IV: Lagrange’s theorem (2/3),2023-11-29,task
668,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (7/13)",2023-11-29,task
669,DSA-IV: Topological sort (2/3),2023-11-29,task
670,DD-III: HDL Models of Sequential Circuits.  (2/3),2023-11-29,task
671,DD Lab: 8. Coding combinational circuits using HDL. (3/11),2023-11-29,task
672,DD-III: HDL Models of Sequential Circuits.  (3/3),2023-11-30,task
673,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (8/10),2023-11-30,task
674,OOP-IV: Inheritance rules for generic types (2/2),2023-11-30,task
675,DD Lab: 8. Coding combinational circuits using HDL. (4/11),2023-11-30,task
676,Math-IV: Lagrange’s theorem (3/3),2023-11-30,task
677,Eng-IV: recyclability (1/2),2023-11-30,task
678,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (8/13)",2023-11-30,task
679,DSA-IV: Topological sort (3/3),2023-11-30,task
680,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (9/10),2023-12-01,task
681,OOP-IV: Reflections (1/3),2023-12-01,task
682,Eng-IV: recyclability (2/2),2023-12-01,task
683,DD Lab: 8. Coding combinational circuits using HDL. (5/11),2023-12-01,task
684,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (9/13)",2023-12-01,task
685,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (1/3),2023-12-01,task
686,Math-IV: Definitions and examples of Rings and Fields.  (1/3),2023-12-01,task
687,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (1/3),2023-12-01,task
688,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (10/10),2023-12-02,task
689,Eng-IV: Understanding Existence as Coexistence of mutually interacting units in all-pervasive space (1/1),2023-12-02,task
690,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (2/3),2023-12-02,task
691,OOP-IV: Reflections (2/3),2023-12-02,task
692,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (2/3),2023-12-02,task
693,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (10/13)",2023-12-02,task
694,DD Lab: 8. Coding combinational circuits using HDL. (6/11),2023-12-02,task
695,Math-IV: Definitions and examples of Rings and Fields.  (2/3),2023-12-02,task
696,DSA Lab: 10. Implement any two sorting algorithms (1/9),2023-12-03,task
697,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (3/3),2023-12-03,task
698,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (11/13)",2023-12-03,task
699,OOP-IV: Reflections (3/3),2023-12-03,task
700,DD Lab: 8. Coding combinational circuits using HDL. (7/11),2023-12-03,task
701,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (3/3),2023-12-03,task
702,Eng-IV: Holistic perception of harmony at all levels of existence.  (1/2),2023-12-03,task
703,Math-IV: Definitions and examples of Rings and Fields.  (3/3),2023-12-03,task
704,OOP-IV: Examples in Java.  (1/2),2023-12-04,task
705,DSA Lab: 10. Implement any two sorting algorithms (2/9),2023-12-04,task
706,Eng-IV: Holistic perception of harmony at all levels of existence.  (2/2),2023-12-04,task
707,DD Lab: 8. Coding combinational circuits using HDL. (8/11),2023-12-04,task
708,Math-V: Partial ordering (1/3),2023-12-04,task
709,DSA-IV: All-pairs shortest path.  (1/3),2023-12-04,task
710,DD-IV: Reduction of State and Flow Tables (1/3),2023-12-04,task
711,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (12/13)",2023-12-04,task
712,OOP-IV: Examples in Java.  (2/2),2023-12-05,task
713,DSA-IV: All-pairs shortest path.  (2/3),2023-12-05,task
714,DD-IV: Reduction of State and Flow Tables (2/3),2023-12-05,task
715,Math-V: Partial ordering (2/3),2023-12-05,task
716,DSA Lab: 10. Implement any two sorting algorithms (3/9),2023-12-05,task
717,DD Lab: 8. Coding combinational circuits using HDL. (9/11),2023-12-05,task
718,Eng-V: Natural acceptance of human values (1/2),2023-12-05,task
719,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (13/13)",2023-12-05,task
720,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (1/13)",2023-12-06,task
721,Eng-V: Natural acceptance of human values (2/2),2023-12-06,task
722,DSA Lab: 10. Implement any two sorting algorithms (4/9),2023-12-06,task
723,Math-V: Partial ordering (3/3),2023-12-06,task
724,OOP-V: ALGORITHMS 9 Introduction to collections (1/2),2023-12-06,task
725,DD Lab: 8. Coding combinational circuits using HDL. (10/11),2023-12-06,task
726,DD-IV: Reduction of State and Flow Tables (3/3),2023-12-06,task
727,DSA-IV: All-pairs shortest path.  (3/3),2023-12-06,task
728,DD-IV: Race-free State Assignment (1/2),2023-12-07,task
729,DSA-V: Sorting: Insertion sort (1/3),2023-12-07,task
730,OOP-V: ALGORITHMS 9 Introduction to collections (2/2),2023-12-07,task
731,Eng-V: Definitiveness of Ethical Human Conduct (1/2),2023-12-07,task
732,DSA Lab: 10. Implement any two sorting algorithms (5/9),2023-12-07,task
733,DD Lab: 8. Coding combinational circuits using HDL. (11/11),2023-12-07,task
734,Math-V: Posets (1/3),2023-12-07,task
735,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (2/13)",2023-12-07,task
736,DSA Lab: 10. Implement any two sorting algorithms (6/9),2023-12-08,task
737,Math-V: Posets (2/3),2023-12-08,task
738,OOP-V: Collection Classes and Interfaces: Array list (1/2),2023-12-08,task
739,DD Lab: 9. Coding sequential circuits using HDL. (1/12),2023-12-08,task
740,DSA-V: Sorting: Insertion sort (2/3),2023-12-08,task
741,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (3/13)",2023-12-08,task
742,DD-IV: Race-free State Assignment (2/2),2023-12-08,task
743,Eng-V: Definitiveness of Ethical Human Conduct (2/2),2023-12-08,task
744,DD Lab: 9. Coding sequential circuits using HDL. (2/12),2023-12-09,task
745,OOP-V: Collection Classes and Interfaces: Array list (2/2),2023-12-09,task
746,Math-V: Posets (3/3),2023-12-09,task
747,Eng-V: Basis for Humanistic Education (1/2),2023-12-09,task
748,DSA-V: Sorting: Insertion sort (3/3),2023-12-09,task
749,DSA Lab: 10. Implement any two sorting algorithms (7/9),2023-12-09,task
750,DD-IV: Hazards.  (1/3),2023-12-09,task
751,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (4/13)",2023-12-09,task
752,DD-IV: Hazards.  (2/3),2023-12-10,task
753,Math-V: Lattices as Posets (1/3),2023-12-10,task
754,DD Lab: 9. Coding sequential circuits using HDL. (3/12),2023-12-10,task
755,OOP-V: Linked list (1/2),2023-12-10,task
756,Eng-V: Basis for Humanistic Education (2/2),2023-12-10,task
757,DSA-V: Shell sort (1/3),2023-12-10,task
758,DSA Lab: 10. Implement any two sorting algorithms (8/9),2023-12-10,task
759,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (5/13)",2023-12-10,task
760,DD-IV: Hazards.  (3/3),2023-12-11,task
761,DSA Lab: 10. Implement any two sorting algorithms (9/9),2023-12-11,task
762,DSA-V: Shell sort (2/3),2023-12-11,task
763,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (6/13)",2023-12-11,task
764,OOP-V: Linked list (2/2),2023-12-11,task
765,Eng-V: Humanistic Constitution and Humanistic Universal Order (1/2),2023-12-11,task
766,Math-V: Lattices as Posets (2/3),2023-12-11,task
767,DD Lab: 9. Coding sequential circuits using HDL. (4/12),2023-12-11,task
768,DD Lab: 9. Coding sequential circuits using HDL. (5/12),2023-12-12,task
769,Eng-V: Humanistic Constitution and Humanistic Universal Order (2/2),2023-12-12,task
770,OOP-V: Queue (1/2),2023-12-12,task
771,DSA Lab: 11. Implement hashing using separate chaining technique (1/10),2023-12-12,task
772,DSA-V: Shell sort (3/3),2023-12-12,task
773,Math-V: Lattices as Posets (3/3),2023-12-12,task
774,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (7/13)",2023-12-12,task
775,DD-V: RAM (1/3),2023-12-12,task
776,DD Lab: 9. Coding sequential circuits using HDL. (6/12),2023-12-13,task
777,DSA Lab: 11. Implement hashing using separate chaining technique (2/10),2023-12-13,task
778,DD-V: RAM (2/3),2023-12-13,task
779,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (8/13)",2023-12-13,task
780,Eng-V: Competence in Professional Ethics (1/2),2023-12-13,task
781,Math-V: Properties of lattices (1/3),2023-12-13,task
782,DSA-V: Radix Exchange sort (1/3),2023-12-13,task
783,OOP-V: Queue (2/2),2023-12-13,task
784,DD-V: RAM (3/3),2023-12-14,task
785,OOP-V: Set (1/2),2023-12-14,task
786,DSA Lab: 11. Implement hashing using separate chaining technique (3/10),2023-12-14,task
787,DD Lab: 9. Coding sequential circuits using HDL. (7/12),2023-12-14,task
788,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (9/13)",2023-12-14,task
789,Math-V: Properties of lattices (2/3),2023-12-14,task
790,DSA-V: Radix Exchange sort (2/3),2023-12-14,task
791,Eng-V: Competence in Professional Ethics (2/2),2023-12-14,task
792,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (10/13)",2023-12-15,task
793,DSA Lab: 11. Implement hashing using separate chaining technique (4/10),2023-12-15,task
794,DD Lab: 9. Coding sequential circuits using HDL. (8/12),2023-12-15,task
795,OOP-V: Set (2/2),2023-12-15,task
796,Eng-V: augmenting universal human order (1/2),2023-12-15,task
797,DSA-V: Radix Exchange sort (3/3),2023-12-15,task
798,Math-V: Properties of lattices (3/3),2023-12-15,task
799,DD-V: Memory Decoding (1/3),2023-12-15,task
800,DSA Lab: 11. Implement hashing using separate chaining technique (5/10),2023-12-16,task
801,DSA-V: Hashing: Hash function (1/3),2023-12-16,task
802,Eng-V: augmenting universal human order (2/2),2023-12-16,task
803,Math-V: Lattices as algebraic systems (1/3),2023-12-16,task
804,DD-V: Memory Decoding (2/3),2023-12-16,task
805,DD Lab: 9. Coding sequential circuits using HDL. (9/12),2023-12-16,task
806,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (11/13)",2023-12-16,task
807,OOP-V: Trees (1/3),2023-12-16,task
808,DSA-V: Hashing: Hash function (2/3),2023-12-17,task
809,DD-V: Memory Decoding (3/3),2023-12-17,task
810,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (12/13)",2023-12-17,task
811,DD Lab: 9. Coding sequential circuits using HDL. (10/12),2023-12-17,task
812,Math-V: Lattices as algebraic systems (2/3),2023-12-17,task
813,Eng-V: the scope and characteristics of people-friendly and eco-friendly (1/1),2023-12-17,task
814,DSA Lab: 11. Implement hashing using separate chaining technique (6/10),2023-12-17,task
815,OOP-V: Trees (2/3),2023-12-17,task
816,DD Lab: 9. Coding sequential circuits using HDL. (11/12),2023-12-18,task
817,DD-V: Error Detection and Correction (1/2),2023-12-18,task
818,OOP-V: Trees (3/3),2023-12-18,task
819,DSA-V: Hashing: Hash function (3/3),2023-12-18,task
820,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (13/13)",2023-12-18,task
821,Eng-V: Holistic Technologies (1/2),2023-12-18,task
822,DSA Lab: 11. Implement hashing using separate chaining technique (7/10),2023-12-18,task
823,Math-V: Lattices as algebraic systems (3/3),2023-12-18,task
824,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (1/13),2023-12-19,task
825,DD Lab: 9. Coding sequential circuits using HDL. (12/12),2023-12-19,task
826,DD-V: Error Detection and Correction (2/2),2023-12-19,task
827,Math-V: Sublattices (1/3),2023-12-19,task
828,Eng-V: Holistic Technologies (2/2),2023-12-19,task
829,DSA-V: Separate chaining (1/3),2023-12-19,task
830,OOP-V: Iterators for collections (1/2),2023-12-19,task
831,DSA Lab: 11. Implement hashing using separate chaining technique (8/10),2023-12-19,task
832,DSA-V: Separate chaining (2/3),2023-12-20,task
833,DD-V: ROM (1/3),2023-12-20,task
834,Math-V: Sublattices (2/3),2023-12-20,task
835,Eng-V: production systems and management models (1/2),2023-12-20,task
836,DSA Lab: 11. Implement hashing using separate chaining technique (9/10),2023-12-20,task
837,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (1/12),2023-12-20,task
838,OOP-V: Iterators for collections (2/2),2023-12-20,task
839,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (2/13),2023-12-20,task
840,DSA-V: Separate chaining (3/3),2023-12-21,task
841,OOP-V: Map class (1/2),2023-12-21,task
842,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (3/13),2023-12-21,task
843,DD-V: ROM (2/3),2023-12-21,task
844,Eng-V: production systems and management models (2/2),2023-12-21,task
845,DSA Lab: 11. Implement hashing using separate chaining technique (10/10),2023-12-21,task
846,Math-V: Sublattices (3/3),2023-12-21,task
847,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (2/12),2023-12-21,task
848,Eng-V: Case studies (1/2),2023-12-22,task
849,DD-V: ROM (3/3),2023-12-22,task
850,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (3/12),2023-12-22,task
851,OOP-V: Map class (2/2),2023-12-22,task
852,Math-V: Direct product and Homomorphism (1/3),2023-12-22,task
853,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (4/13),2023-12-22,task
854,DSA-V: Open addressing (1/3),2023-12-22,task
855,DSA Lab: 12. Mini Project (1/10),2023-12-22,task
856,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (5/13),2023-12-23,task
857,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (4/12),2023-12-23,task
858,OOP-V: Collection algorithms: Sorting (1/2),2023-12-23,task
859,DD-V: Programmable Logic Array (1/3),2023-12-23,task
860,Math-V: Direct product and Homomorphism (2/3),2023-12-23,task
861,DSA Lab: 12. Mini Project (2/10),2023-12-23,task
862,DSA-V: Open addressing (2/3),2023-12-23,task
863,Eng-V: Case studies (2/2),2023-12-23,task
864,DSA Lab: 12. Mini Project (3/10),2023-12-24,task
865,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (6/13),2023-12-24,task
866,DD-V: Programmable Logic Array (2/3),2023-12-24,task
867,OOP-V: Collection algorithms: Sorting (2/2),2023-12-24,task
868,Math-V: Direct product and Homomorphism (3/3),2023-12-24,task
869,Eng-V: Strategy for the transition from the present state to Universal Human Order (1/2),2023-12-24,task
870,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (5/12),2023-12-24,task
871,DSA-V: Open addressing (3/3),2023-12-24,task
872,DD-V: Programmable Logic Array (3/3),2023-12-25,task
873,OOP-V: Searching (1/2),2023-12-25,task
874,DSA Lab: 12. Mini Project (4/10),2023-12-25,task
875,DSA-V: Rehashing (1/3),2023-12-25,task
876,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (6/12),2023-12-25,task
877,Eng-V: Strategy for the transition from the present state to Universal Human Order (2/2),2023-12-25,task
878,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (7/13),2023-12-25,task
879,Math-V: Boolean algebra (1/3),2023-12-25,task
880,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (8/13),2023-12-26,task
881,OOP-V: Searching (2/2),2023-12-26,task
882,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (7/12),2023-12-26,task
883,Eng-V: At the level of individual: as socially and ecologically responsible engineers (1/2),2023-12-26,task
884,DD-V: Programmable Array Logic (1/3),2023-12-26,task
885,DSA-V: Rehashing (2/3),2023-12-26,task
886,DSA Lab: 12. Mini Project (5/10),2023-12-26,task
887,Math-V: Boolean algebra (2/3),2023-12-26,task
888,Math-V: Boolean algebra (3/3),2023-12-27,task
889,Eng-V: At the level of individual: as socially and ecologically responsible engineers (2/2),2023-12-27,task
890,DD-V: Programmable Array Logic (2/3),2023-12-27,task
891,DSA-V: Rehashing (3/3),2023-12-27,task
892,OOP-V: User-defined algorithms (1/2),2023-12-27,task
893,DSA Lab: 12. Mini Project (6/10),2023-12-27,task
894,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (8/12),2023-12-27,task
895,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (9/13),2023-12-27,task
896,Eng-V: technologists and managers (1/2),2023-12-28,task
897,DD-V: Programmable Array Logic (3/3),2023-12-28,task
898,DSA-V: Extendible hashing.  (1/4),2023-12-28,task
899,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (9/12),2023-12-28,task
900,DSA Lab: 12. Mini Project (7/10),2023-12-28,task
901,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (10/13),2023-12-28,task
902,Math-V: Stone’s representation Theorem.  (1/4),2023-12-28,task
903,OOP-V: User-defined algorithms (2/2),2023-12-28,task
904,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (10/12),2023-12-29,task
905,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (11/13),2023-12-29,task
906,OOP-V: Examples in Java.  (1/3),2023-12-29,task
907,Eng-V: technologists and managers (2/2),2023-12-29,task
908,DSA Lab: 12. Mini Project (8/10),2023-12-29,task
909,DSA-V: Extendible hashing.  (2/4),2023-12-29,task
910,DD-V: Sequential Programmable Devices.  (1/3),2023-12-29,task
911,Math-V: Stone’s representation Theorem.  (2/4),2023-12-29,task
912,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (11/12),2023-12-30,task
913,DD-V: Sequential Programmable Devices.  (2/3),2023-12-30,task
914,OOP-V: Examples in Java.  (2/3),2023-12-30,task
915,Math-V: Stone’s representation Theorem.  (3/4),2023-12-30,task
916,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (12/13),2023-12-30,task
917,DSA-V: Extendible hashing.  (3/4),2023-12-30,task
918,Eng-V: At the level of society: as mutually enriching institutions and organizations.  (1/2),2023-12-30,task
919,DSA Lab: 12. Mini Project (9/10),2023-12-30,task
920,DSA-V: Extendible hashing.  (4/4),2023-12-31,task
921,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (12/12),2023-12-31,task
922,OOP-V: Examples in Java.  (3/3),2023-12-31,task
923,DD-V: Sequential Programmable Devices.  (3/3),2023-12-31,task
924,Math-V: Stone’s representation Theorem.  (4/4),2023-12-31,task
925,Eng-V: At the level of society: as mutually enriching institutions and organizations.  (2/2),2023-12-31,task
926,DSA Lab: 12. Mini Project (10/10),2023-12-31,task
927,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (13/13),2023-12-31,task
