TYPE,CONTENT,DESCRIPTION,PRIORITY,INDENT,AUTHOR,RESPONSIBLE,DATE,DATE_LANG,TIMEZONE
task,Eng-I: Value Education (1/1),,,,,,2023-09-07,,
task,OOP-I: Principles of OOP: Classes (1/2),,,,,,2023-09-07,,
task,DD-I: Number Systems (1/2),,,,,,2023-09-07,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (1/11),,,,,,2023-09-07,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (1/9),,,,,,2023-09-07,,
task,Math-I: Propositional Logic (1/3),,,,,,2023-09-07,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (1/12),,,,,,2023-09-07,,
task,DSA-I: Algorithm Analysis: Running time calculations (1/3),,,,,,2023-09-07,,
task,Math-I: Propositional Logic (2/3),,,,,,2023-09-08,,
task,OOP-I: Principles of OOP: Classes (2/2),,,,,,2023-09-08,,
task,Eng-I: Need (1/2),,,,,,2023-09-08,,
task,DSA-I: Algorithm Analysis: Running time calculations (2/3),,,,,,2023-09-08,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (2/9),,,,,,2023-09-08,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (2/11),,,,,,2023-09-08,,
task,DD-I: Number Systems (2/2),,,,,,2023-09-08,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (2/12),,,,,,2023-09-08,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (3/9),,,,,,2023-09-09,,
task,Math-I: Propositional Logic (3/3),,,,,,2023-09-09,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (3/12),,,,,,2023-09-09,,
task,DD-I: Arithmetic Operations (1/3),,,,,,2023-09-09,,
task,OOP-I: Objects (1/2),,,,,,2023-09-09,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (3/11),,,,,,2023-09-09,,
task,DSA-I: Algorithm Analysis: Running time calculations (3/3),,,,,,2023-09-09,,
task,Eng-I: Need (2/2),,,,,,2023-09-09,,
task,Eng-I: Basic Guidelines (1/2),,,,,,2023-09-10,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (4/11),,,,,,2023-09-10,,
task,DSA-I: Abstract Data Types (ADTs) (1/3),,,,,,2023-09-10,,
task,Math-I: Propositional equivalences (1/3),,,,,,2023-09-10,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (4/12),,,,,,2023-09-10,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (4/9),,,,,,2023-09-10,,
task,OOP-I: Objects (2/2),,,,,,2023-09-10,,
task,DD-I: Arithmetic Operations (2/3),,,,,,2023-09-10,,
task,DD-I: Arithmetic Operations (3/3),,,,,,2023-09-11,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (5/12),,,,,,2023-09-11,,
task,Math-I: Propositional equivalences (2/3),,,,,,2023-09-11,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (5/9),,,,,,2023-09-11,,
task,Eng-I: Basic Guidelines (2/2),,,,,,2023-09-11,,
task,OOP-I: Data hiding (1/2),,,,,,2023-09-11,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (5/11),,,,,,2023-09-11,,
task,DSA-I: Abstract Data Types (ADTs) (2/3),,,,,,2023-09-11,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (6/12),,,,,,2023-09-12,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (6/9),,,,,,2023-09-12,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (6/11),,,,,,2023-09-12,,
task,DSA-I: Abstract Data Types (ADTs) (3/3),,,,,,2023-09-12,,
task,OOP-I: Data hiding (2/2),,,,,,2023-09-12,,
task,Eng-I: Content and Process (1/2),,,,,,2023-09-12,,
task,DD-I: Binary Codes (1/3),,,,,,2023-09-12,,
task,Math-I: Propositional equivalences (3/3),,,,,,2023-09-12,,
task,DD-I: Binary Codes (2/3),,,,,,2023-09-13,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (7/11),,,,,,2023-09-13,,
task,OOP-I: Data encapsulation (1/2),,,,,,2023-09-13,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (7/12),,,,,,2023-09-13,,
task,DSA-I: List ADT: Array implementation of lists (1/3),,,,,,2023-09-13,,
task,Eng-I: Content and Process (2/2),,,,,,2023-09-13,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (7/9),,,,,,2023-09-13,,
task,Math-I: Predicates and quantifiers (1/3),,,,,,2023-09-13,,
task,DSA-I: List ADT: Array implementation of lists (2/3),,,,,,2023-09-14,,
task,DD-I: Binary Codes (3/3),,,,,,2023-09-14,,
task,Eng-I: Self-Exploration (1/2),,,,,,2023-09-14,,
task,OOP-I: Data encapsulation (2/2),,,,,,2023-09-14,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (8/12),,,,,,2023-09-14,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (8/11),,,,,,2023-09-14,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (8/9),,,,,,2023-09-14,,
task,Math-I: Predicates and quantifiers (2/3),,,,,,2023-09-14,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (9/11),,,,,,2023-09-15,,
task,DSA Lab: 1. Represent polynomial expression as linked list and write functions for polynomial manipulation (9/9),,,,,,2023-09-15,,
task,Math-I: Predicates and quantifiers (3/3),,,,,,2023-09-15,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (9/12),,,,,,2023-09-15,,
task,Eng-I: Self-Exploration (2/2),,,,,,2023-09-15,,
task,OOP-I: Inheritance (1/2),,,,,,2023-09-15,,
task,DSA-I: List ADT: Array implementation of lists (3/3),,,,,,2023-09-15,,
task,DD-I: Boolean Algebra and Logic Gates (1/3),,,,,,2023-09-15,,
task,Math-I: Nested quantifiers (1/3),,,,,,2023-09-16,,
task,OOP-I: Inheritance (2/2),,,,,,2023-09-16,,
task,DSA-I: Linked lists (1/3),,,,,,2023-09-16,,
task,Eng-I: meaning (1/2),,,,,,2023-09-16,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (1/10)",,,,,,2023-09-16,,
task,DD-I: Boolean Algebra and Logic Gates (2/3),,,,,,2023-09-16,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (10/11),,,,,,2023-09-16,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (10/12),,,,,,2023-09-16,,
task,DD-I: Boolean Algebra and Logic Gates (3/3),,,,,,2023-09-17,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (2/10)",,,,,,2023-09-17,,
task,Eng-I: meaning (2/2),,,,,,2023-09-17,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (11/12),,,,,,2023-09-17,,
task,Math-I: Nested quantifiers (2/3),,,,,,2023-09-17,,
task,OOP-I: Poly- morphism (1/2),,,,,,2023-09-17,,
task,DD Lab: 1. Verification of Boolean Theorems using basic gates. (11/11),,,,,,2023-09-17,,
task,DSA-I: Linked lists (2/3),,,,,,2023-09-17,,
task,Eng-I: importance and process (1/2),,,,,,2023-09-18,,
task,Math-I: Nested quantifiers (3/3),,,,,,2023-09-18,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (1/12)",,,,,,2023-09-18,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (3/10)",,,,,,2023-09-18,,
task,DSA-I: Linked lists (3/3),,,,,,2023-09-18,,
task,OOP-I: Poly- morphism (2/2),,,,,,2023-09-18,,
task,DD-I: Theorems and Properties of Boolean Algebra (1/2),,,,,,2023-09-18,,
task,OOP Lab: 1. Build an application using classes and objects (Eg: Electricity bill generation) (12/12),,,,,,2023-09-18,,
task,Eng-I: importance and process (2/2),,,,,,2023-09-19,,
task,OOP-I: Definition of Classes: Objects (1/3),,,,,,2023-09-19,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (1/13),,,,,,2023-09-19,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (2/12)",,,,,,2023-09-19,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (4/10)",,,,,,2023-09-19,,
task,Math-I: Rules of inference (1/3),,,,,,2023-09-19,,
task,DSA-I: Circular linked lists (1/3),,,,,,2023-09-19,,
task,DD-I: Theorems and Properties of Boolean Algebra (2/2),,,,,,2023-09-19,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (2/13),,,,,,2023-09-20,,
task,Math-I: Rules of inference (2/3),,,,,,2023-09-20,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (3/12)",,,,,,2023-09-20,,
task,DSA-I: Circular linked lists (2/3),,,,,,2023-09-20,,
task,DD-I: Boolean Functions (1/3),,,,,,2023-09-20,,
task,Eng-I: Continuous Happiness and Prosperity (1/1),,,,,,2023-09-20,,
task,OOP-I: Definition of Classes: Objects (2/3),,,,,,2023-09-20,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (5/10)",,,,,,2023-09-20,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (3/13),,,,,,2023-09-21,,
task,Math-I: Rules of inference (3/3),,,,,,2023-09-21,,
task,OOP-I: Definition of Classes: Objects (3/3),,,,,,2023-09-21,,
task,Eng-I: A look at basic Human Aspirations (1/2),,,,,,2023-09-21,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (4/12)",,,,,,2023-09-21,,
task,DSA-I: Circular linked lists (3/3),,,,,,2023-09-21,,
task,DD-I: Boolean Functions (2/3),,,,,,2023-09-21,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (6/10)",,,,,,2023-09-21,,
task,DD-I: Boolean Functions (3/3),,,,,,2023-09-22,,
task,Eng-I: A look at basic Human Aspirations (2/2),,,,,,2023-09-22,,
task,Math-I: Introduction to proofs (1/3),,,,,,2023-09-22,,
task,DSA-I: Doubly linked lists (1/3),,,,,,2023-09-22,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (4/13),,,,,,2023-09-22,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (5/12)",,,,,,2023-09-22,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (7/10)",,,,,,2023-09-22,,
task,OOP-I: Methods (1/2),,,,,,2023-09-22,,
task,DD-I: Canonical and Standard Forms (1/3),,,,,,2023-09-23,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (6/12)",,,,,,2023-09-23,,
task,DSA-I: Doubly linked lists (2/3),,,,,,2023-09-23,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (5/13),,,,,,2023-09-23,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (8/10)",,,,,,2023-09-23,,
task,Math-I: Introduction to proofs (2/3),,,,,,2023-09-23,,
task,Eng-I: Right understanding (1/2),,,,,,2023-09-23,,
task,OOP-I: Methods (2/2),,,,,,2023-09-23,,
task,Eng-I: Right understanding (2/2),,,,,,2023-09-24,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (9/10)",,,,,,2023-09-24,,
task,DSA-I: Doubly linked lists (3/3),,,,,,2023-09-24,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (6/13),,,,,,2023-09-24,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (7/12)",,,,,,2023-09-24,,
task,Math-I: Introduction to proofs (3/3),,,,,,2023-09-24,,
task,OOP-I: Access specifiers (1/2),,,,,,2023-09-24,,
task,DD-I: Canonical and Standard Forms (2/3),,,,,,2023-09-24,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (7/13),,,,,,2023-09-25,,
task,DSA-I: Applications of Lists: Polynomial manipulation.  (1/3),,,,,,2023-09-25,,
task,DD-I: Canonical and Standard Forms (3/3),,,,,,2023-09-25,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (8/12)",,,,,,2023-09-25,,
task,OOP-I: Access specifiers (2/2),,,,,,2023-09-25,,
task,"DSA Lab: 2. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations) (10/10)",,,,,,2023-09-25,,
task,Math-I: Proof methods and strategy (1/3),,,,,,2023-09-25,,
task,Eng-I: Relationship and Physical Facilities (1/2),,,,,,2023-09-25,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (9/12)",,,,,,2023-09-26,,
task,DD-I: Simplification of Boolean Functions using Karnaugh Map (1/3),,,,,,2023-09-26,,
task,OOP-I: Static and final classes and members (1/2),,,,,,2023-09-26,,
task,DSA-I: Applications of Lists: Polynomial manipulation.  (2/3),,,,,,2023-09-26,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (8/13),,,,,,2023-09-26,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (1/10)",,,,,,2023-09-26,,
task,Math-I: Proof methods and strategy (2/3),,,,,,2023-09-26,,
task,Eng-I: Relationship and Physical Facilities (2/2),,,,,,2023-09-26,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (9/13),,,,,,2023-09-27,,
task,Eng-I: The basic requirements (1/2),,,,,,2023-09-27,,
task,DD-I: Simplification of Boolean Functions using Karnaugh Map (2/3),,,,,,2023-09-27,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (2/10)",,,,,,2023-09-27,,
task,Math-I: Proof methods and strategy (3/3),,,,,,2023-09-27,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (10/12)",,,,,,2023-09-27,,
task,DSA-I: Applications of Lists: Polynomial manipulation.  (3/3),,,,,,2023-09-27,,
task,OOP-I: Static and final classes and members (2/2),,,,,,2023-09-27,,
task,DSA-II: Stack ADT: Stack model (1/3),,,,,,2023-09-28,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (11/12)",,,,,,2023-09-28,,
task,Math-I: Normal forms (1/3),,,,,,2023-09-28,,
task,OOP-I: Object Construction and Destruction (1/2),,,,,,2023-09-28,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (3/10)",,,,,,2023-09-28,,
task,DD-I: Simplification of Boolean Functions using Karnaugh Map (3/3),,,,,,2023-09-28,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (10/13),,,,,,2023-09-28,,
task,Eng-I: The basic requirements (2/2),,,,,,2023-09-28,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (4/10)",,,,,,2023-09-29,,
task,DSA-II: Stack ADT: Stack model (2/3),,,,,,2023-09-29,,
task,Math-I: Normal forms (2/3),,,,,,2023-09-29,,
task,DD-I: Logic Gates (1/2),,,,,,2023-09-29,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (11/13),,,,,,2023-09-29,,
task,Eng-I: Understanding Happiness and Prosperity (1/2),,,,,,2023-09-29,,
task,"DD Lab: 2. Design and implementation of combinational circuits using basic gates for arbitrary functions, code
converters. (12/12)",,,,,,2023-09-29,,
task,OOP-I: Object Construction and Destruction (2/2),,,,,,2023-09-29,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (1/11),,,,,,2023-09-30,,
task,DD-I: Logic Gates (2/2),,,,,,2023-09-30,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (5/10)",,,,,,2023-09-30,,
task,OOP-I: Fundamental programming structures in Java (1/2),,,,,,2023-09-30,,
task,Eng-I: Understanding Happiness and Prosperity (2/2),,,,,,2023-09-30,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (12/13),,,,,,2023-09-30,,
task,Math-I: Normal forms (3/3),,,,,,2023-09-30,,
task,DSA-II: Stack ADT: Stack model (3/3),,,,,,2023-09-30,,
task,Eng-I: A critical appraisal of the current scenario (1/2),,,,,,2023-10-01,,
task,Math-I: Applications to switching circuits.  (1/3),,,,,,2023-10-01,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (2/11),,,,,,2023-10-01,,
task,OOP Lab: 2. Develop an application using Inheritance (Eg: Payroll application) (13/13),,,,,,2023-10-01,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (6/10)",,,,,,2023-10-01,,
task,OOP-I: Fundamental programming structures in Java (2/2),,,,,,2023-10-01,,
task,DD-I: NAND and NOR Implementations.  (1/3),,,,,,2023-10-01,,
task,DSA-II: Implementation of stacks (1/3),,,,,,2023-10-01,,
task,Math-I: Applications to switching circuits.  (2/3),,,,,,2023-10-02,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (7/10)",,,,,,2023-10-02,,
task,DD-I: NAND and NOR Implementations.  (2/3),,,,,,2023-10-02,,
task,Eng-I: A critical appraisal of the current scenario (2/2),,,,,,2023-10-02,,
task,OOP-I: Streams: Input (1/2),,,,,,2023-10-02,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (1/13),,,,,,2023-10-02,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (3/11),,,,,,2023-10-02,,
task,DSA-II: Implementation of stacks (2/3),,,,,,2023-10-02,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (2/13),,,,,,2023-10-03,,
task,DSA-II: Implementation of stacks (3/3),,,,,,2023-10-03,,
task,Eng-I: Method to fulfil the above human aspirations (1/2),,,,,,2023-10-03,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (8/10)",,,,,,2023-10-03,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (4/11),,,,,,2023-10-03,,
task,Math-I: Applications to switching circuits.  (3/3),,,,,,2023-10-03,,
task,DD-I: NAND and NOR Implementations.  (3/3),,,,,,2023-10-03,,
task,OOP-I: Streams: Input (2/2),,,,,,2023-10-03,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (9/10)",,,,,,2023-10-04,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (5/11),,,,,,2023-10-04,,
task,DSA-II: Applications: Balancing symbols (1/3),,,,,,2023-10-04,,
task,Math-II: Mathematical induction (1/3),,,,,,2023-10-04,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (3/13),,,,,,2023-10-04,,
task,DD-II: Combinational Circuits (1/3),,,,,,2023-10-04,,
task,Eng-I: Method to fulfil the above human aspirations (2/2),,,,,,2023-10-04,,
task,OOP-I: Output (1/3),,,,,,2023-10-04,,
task,"DSA Lab: 3. Implementation of Stack ADT (e.g Balancing parenthesis, infix to postfix conversion, evaluation of
postfix expression) (10/10)",,,,,,2023-10-05,,
task,Math-II: Mathematical induction (2/3),,,,,,2023-10-05,,
task,OOP-I: Output (2/3),,,,,,2023-10-05,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (6/11),,,,,,2023-10-05,,
task,DD-II: Combinational Circuits (2/3),,,,,,2023-10-05,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (4/13),,,,,,2023-10-05,,
task,DSA-II: Applications: Balancing symbols (2/3),,,,,,2023-10-05,,
task,Eng-I: UNDERSTANDING and living in harmony at various levels.  (1/1),,,,,,2023-10-05,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (5/13),,,,,,2023-10-06,,
task,DD-II: Combinational Circuits (3/3),,,,,,2023-10-06,,
task,Eng-II: An understanding human being as a co-existence of the sentient ‘I’ and the material ‘Body’ (1/2),,,,,,2023-10-06,,
task,OOP-I: Output (3/3),,,,,,2023-10-06,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (7/11),,,,,,2023-10-06,,
task,DSA-II: Applications: Balancing symbols (3/3),,,,,,2023-10-06,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (1/9),,,,,,2023-10-06,,
task,Math-II: Mathematical induction (3/3),,,,,,2023-10-06,,
task,OOP-I: String handling (1/2),,,,,,2023-10-07,,
task,DD-II: Analysis and Design Procedures (1/3),,,,,,2023-10-07,,
task,Eng-II: An understanding human being as a co-existence of the sentient ‘I’ and the material ‘Body’ (2/2),,,,,,2023-10-07,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (8/11),,,,,,2023-10-07,,
task,DSA-II: Infix to postfix conversion (1/3),,,,,,2023-10-07,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (6/13),,,,,,2023-10-07,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (2/9),,,,,,2023-10-07,,
task,Math-II: Strong induction (1/3),,,,,,2023-10-07,,
task,DD-II: Analysis and Design Procedures (2/3),,,,,,2023-10-08,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (9/11),,,,,,2023-10-08,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (3/9),,,,,,2023-10-08,,
task,Math-II: Strong induction (2/3),,,,,,2023-10-08,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (7/13),,,,,,2023-10-08,,
task,DSA-II: Infix to postfix conversion (2/3),,,,,,2023-10-08,,
task,Eng-II: Understanding the needs of Self (‘I’) and ‘Body’ (1/2),,,,,,2023-10-08,,
task,OOP-I: String handling (2/2),,,,,,2023-10-08,,
task,Math-II: Strong induction (3/3),,,,,,2023-10-09,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (4/9),,,,,,2023-10-09,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (8/13),,,,,,2023-10-09,,
task,Eng-II: Understanding the needs of Self (‘I’) and ‘Body’ (2/2),,,,,,2023-10-09,,
task,OOP-I: Examples in Java.  (1/2),,,,,,2023-10-09,,
task,DD-II: Analysis and Design Procedures (3/3),,,,,,2023-10-09,,
task,DSA-II: Infix to postfix conversion (3/3),,,,,,2023-10-09,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (10/11),,,,,,2023-10-09,,
task,Math-II: The pigeonhole principle (1/3),,,,,,2023-10-10,,
task,DD Lab: 3. Design and implement half/full adder and subtractor. (11/11),,,,,,2023-10-10,,
task,Eng-II: Sukh and Suvidha (1/2),,,,,,2023-10-10,,
task,DSA-II: Evaluating postfix expressions (1/3),,,,,,2023-10-10,,
task,DD-II: Binary Adder (1/2),,,,,,2023-10-10,,
task,OOP-I: Examples in Java.  (2/2),,,,,,2023-10-10,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (5/9),,,,,,2023-10-10,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (9/13),,,,,,2023-10-10,,
task,OOP-II: Inheritance: Definition (1/2),,,,,,2023-10-11,,
task,DD-II: Binary Adder (2/2),,,,,,2023-10-11,,
task,DSA-II: Evaluating postfix expressions (2/3),,,,,,2023-10-11,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (1/12)",,,,,,2023-10-11,,
task,Eng-II: Sukh and Suvidha (2/2),,,,,,2023-10-11,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (6/9),,,,,,2023-10-11,,
task,Math-II: The pigeonhole principle (2/3),,,,,,2023-10-11,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (10/13),,,,,,2023-10-11,,
task,Math-II: The pigeonhole principle (3/3),,,,,,2023-10-12,,
task,OOP-II: Inheritance: Definition (2/2),,,,,,2023-10-12,,
task,Eng-II: Understanding the Body as an instrument of ‘I’ (I being the doer (1/2),,,,,,2023-10-12,,
task,DD-II: Subtractor (1/3),,,,,,2023-10-12,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (7/9),,,,,,2023-10-12,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (2/12)",,,,,,2023-10-12,,
task,DSA-II: Evaluating postfix expressions (3/3),,,,,,2023-10-12,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (11/13),,,,,,2023-10-12,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (12/13),,,,,,2023-10-13,,
task,Eng-II: Understanding the Body as an instrument of ‘I’ (I being the doer (2/2),,,,,,2023-10-13,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (3/12)",,,,,,2023-10-13,,
task,OOP-II: Types of inheritance: Single (1/2),,,,,,2023-10-13,,
task,DSA-II: Function calls (1/3),,,,,,2023-10-13,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (8/9),,,,,,2023-10-13,,
task,Math-II: Recurrence relations (1/3),,,,,,2023-10-13,,
task,DD-II: Subtractor (2/3),,,,,,2023-10-13,,
task,DSA-II: Function calls (2/3),,,,,,2023-10-14,,
task,OOP Lab: 3. Write a program to experiment with Polymorphism (E.g. Area of different shapes) (13/13),,,,,,2023-10-14,,
task,DD-II: Subtractor (3/3),,,,,,2023-10-14,,
task,DSA Lab: 4. Implementation of Queue ADT (e.g Simulating printer jobs) (9/9),,,,,,2023-10-14,,
task,Math-II: Recurrence relations (2/3),,,,,,2023-10-14,,
task,OOP-II: Types of inheritance: Single (2/2),,,,,,2023-10-14,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (4/12)",,,,,,2023-10-14,,
task,Eng-II: seer and enjoyer) (1/2),,,,,,2023-10-14,,
task,DSA-II: Function calls (3/3),,,,,,2023-10-15,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (5/12)",,,,,,2023-10-15,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (1/13)",,,,,,2023-10-15,,
task,Math-II: Recurrence relations (3/3),,,,,,2023-10-15,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (1/10)",,,,,,2023-10-15,,
task,Eng-II: seer and enjoyer) (2/2),,,,,,2023-10-15,,
task,OOP-II: Multilevel (1/2),,,,,,2023-10-15,,
task,DD-II: Decimal Adder (1/3),,,,,,2023-10-15,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (6/12)",,,,,,2023-10-16,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (2/13)",,,,,,2023-10-16,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (2/10)",,,,,,2023-10-16,,
task,Math-II: Partition of integers (1/3),,,,,,2023-10-16,,
task,OOP-II: Multilevel (2/2),,,,,,2023-10-16,,
task,Eng-II: Understanding the characteristics and activities of ‘I’ and harmony in ‘I’ (1/2),,,,,,2023-10-16,,
task,DSA-II: Queue ADT: Queue model (1/3),,,,,,2023-10-16,,
task,DD-II: Decimal Adder (2/3),,,,,,2023-10-16,,
task,DD-II: Decimal Adder (3/3),,,,,,2023-10-17,,
task,OOP-II: Multiple (1/2),,,,,,2023-10-17,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (3/10)",,,,,,2023-10-17,,
task,Eng-II: Understanding the characteristics and activities of ‘I’ and harmony in ‘I’ (2/2),,,,,,2023-10-17,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (7/12)",,,,,,2023-10-17,,
task,DSA-II: Queue ADT: Queue model (2/3),,,,,,2023-10-17,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (3/13)",,,,,,2023-10-17,,
task,Math-II: Partition of integers (2/3),,,,,,2023-10-17,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (4/10)",,,,,,2023-10-18,,
task,DSA-II: Queue ADT: Queue model (3/3),,,,,,2023-10-18,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (4/13)",,,,,,2023-10-18,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (8/12)",,,,,,2023-10-18,,
task,Eng-II: Understanding the harmony of I with the Body: Sanyam and Swasthya (1/2),,,,,,2023-10-18,,
task,OOP-II: Multiple (2/2),,,,,,2023-10-18,,
task,DD-II: Binary Multiplier (1/3),,,,,,2023-10-18,,
task,Math-II: Partition of integers (3/3),,,,,,2023-10-18,,
task,Eng-II: Understanding the harmony of I with the Body: Sanyam and Swasthya (2/2),,,,,,2023-10-19,,
task,Math-II: Solving linear recurrence relations using generating functions (1/3),,,,,,2023-10-19,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (5/10)",,,,,,2023-10-19,,
task,DSA-II: Array implementation of queues (1/3),,,,,,2023-10-19,,
task,OOP-II: Hierarchical (1/3),,,,,,2023-10-19,,
task,DD-II: Binary Multiplier (2/3),,,,,,2023-10-19,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (5/13)",,,,,,2023-10-19,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (9/12)",,,,,,2023-10-19,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (10/12)",,,,,,2023-10-20,,
task,OOP-II: Hierarchical (2/3),,,,,,2023-10-20,,
task,DSA-II: Array implementation of queues (2/3),,,,,,2023-10-20,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (6/10)",,,,,,2023-10-20,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (6/13)",,,,,,2023-10-20,,
task,DD-II: Binary Multiplier (3/3),,,,,,2023-10-20,,
task,Eng-II: correct appraisal of Physical needs (1/1),,,,,,2023-10-20,,
task,Math-II: Solving linear recurrence relations using generating functions (2/3),,,,,,2023-10-20,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (7/13)",,,,,,2023-10-21,,
task,DD-II: Magnitude Comparator (1/2),,,,,,2023-10-21,,
task,OOP-II: Hierarchical (3/3),,,,,,2023-10-21,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (7/10)",,,,,,2023-10-21,,
task,Math-II: Solving linear recurrence relations using generating functions (3/3),,,,,,2023-10-21,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (11/12)",,,,,,2023-10-21,,
task,DSA-II: Array implementation of queues (3/3),,,,,,2023-10-21,,
task,Eng-II: the meaning of Prosperity in detail (1/2),,,,,,2023-10-21,,
task,DD-II: Magnitude Comparator (2/2),,,,,,2023-10-22,,
task,DSA-II: Applications of queues.  (1/3),,,,,,2023-10-22,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (8/13)",,,,,,2023-10-22,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (8/10)",,,,,,2023-10-22,,
task,Math-II: Inclusion and Exclusion Principle and its applications.  (1/3),,,,,,2023-10-22,,
task,Eng-II: the meaning of Prosperity in detail (2/2),,,,,,2023-10-22,,
task,"DD Lab: 4. Design and implement combinational circuits using MSI devices:
• 4-bit binary adder/subtractor
• Parity generator/checker
• Magnitude Comparator
• Application using multiplexers (12/12)",,,,,,2023-10-22,,
task,OOP-II: Subclass constructors (1/2),,,,,,2023-10-22,,
task,DSA-II: Applications of queues.  (2/3),,,,,,2023-10-23,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (9/10)",,,,,,2023-10-23,,
task,DD-II: Decoders (1/3),,,,,,2023-10-23,,
task,Math-II: Inclusion and Exclusion Principle and its applications.  (2/3),,,,,,2023-10-23,,
task,Eng-II: Pro- grams to ensure Sanyam and Swasthya.  (1/2),,,,,,2023-10-23,,
task,DD Lab: 5. Design and implement shift-registers. (1/12),,,,,,2023-10-23,,
task,OOP-II: Subclass constructors (2/2),,,,,,2023-10-23,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (9/13)",,,,,,2023-10-23,,
task,DD-II: Decoders (2/3),,,,,,2023-10-24,,
task,"DSA Lab: 5. Implement binary search tree and produce its pre-order, in-order, and post-order traversals (10/10)",,,,,,2023-10-24,,
task,DD Lab: 5. Design and implement shift-registers. (2/12),,,,,,2023-10-24,,
task,Math-II: Inclusion and Exclusion Principle and its applications.  (3/3),,,,,,2023-10-24,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (10/13)",,,,,,2023-10-24,,
task,DSA-II: Applications of queues.  (3/3),,,,,,2023-10-24,,
task,Eng-II: Pro- grams to ensure Sanyam and Swasthya.  (2/2),,,,,,2023-10-24,,
task,OOP-II: Interfaces in Java: Definition (1/2),,,,,,2023-10-24,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (1/10),,,,,,2023-10-25,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (11/13)",,,,,,2023-10-25,,
task,DD-II: Decoders (3/3),,,,,,2023-10-25,,
task,OOP-II: Interfaces in Java: Definition (2/2),,,,,,2023-10-25,,
task,Math-III: Graphs (1/3),,,,,,2023-10-25,,
task,DSA-III: Preliminaries (1/3),,,,,,2023-10-25,,
task,Eng-III: Understanding harmony in the family (1/2),,,,,,2023-10-25,,
task,DD Lab: 5. Design and implement shift-registers. (3/12),,,,,,2023-10-25,,
task,DSA-III: Preliminaries (2/3),,,,,,2023-10-26,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (2/10),,,,,,2023-10-26,,
task,Eng-III: Understanding harmony in the family (2/2),,,,,,2023-10-26,,
task,Math-III: Graphs (2/3),,,,,,2023-10-26,,
task,DD-II: Encoders (1/3),,,,,,2023-10-26,,
task,DD Lab: 5. Design and implement shift-registers. (4/12),,,,,,2023-10-26,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (12/13)",,,,,,2023-10-26,,
task,OOP-II: Implementation (1/2),,,,,,2023-10-26,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (3/10),,,,,,2023-10-27,,
task,DD-II: Encoders (2/3),,,,,,2023-10-27,,
task,"OOP Lab: 4. Design a Java interface for ADTs. (E.g. Stack, Queue) (13/13)",,,,,,2023-10-27,,
task,DD Lab: 5. Design and implement shift-registers. (5/12),,,,,,2023-10-27,,
task,Math-III: Graphs (3/3),,,,,,2023-10-27,,
task,DSA-III: Preliminaries (3/3),,,,,,2023-10-27,,
task,OOP-II: Implementation (2/2),,,,,,2023-10-27,,
task,Eng-III: The basic unit of human interaction (1/2),,,,,,2023-10-27,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (1/13),,,,,,2023-10-28,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (4/10),,,,,,2023-10-28,,
task,Math-III: Graph terminology and special types of graphs (1/3),,,,,,2023-10-28,,
task,DD-II: Encoders (3/3),,,,,,2023-10-28,,
task,OOP-II: Extending interfaces (1/2),,,,,,2023-10-28,,
task,Eng-III: The basic unit of human interaction (2/2),,,,,,2023-10-28,,
task,DSA-III: Binary trees: Expression trees (1/3),,,,,,2023-10-28,,
task,DD Lab: 5. Design and implement shift-registers. (6/12),,,,,,2023-10-28,,
task,DD Lab: 5. Design and implement shift-registers. (7/12),,,,,,2023-10-29,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (2/13),,,,,,2023-10-29,,
task,DD-II: Multiplexers (1/3),,,,,,2023-10-29,,
task,DSA-III: Binary trees: Expression trees (2/3),,,,,,2023-10-29,,
task,Math-III: Graph terminology and special types of graphs (2/3),,,,,,2023-10-29,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (5/10),,,,,,2023-10-29,,
task,OOP-II: Extending interfaces (2/2),,,,,,2023-10-29,,
task,Eng-III: understanding values in a human-to-human relationship (1/2),,,,,,2023-10-29,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (3/13),,,,,,2023-10-30,,
task,DSA-III: Binary trees: Expression trees (3/3),,,,,,2023-10-30,,
task,DD Lab: 5. Design and implement shift-registers. (8/12),,,,,,2023-10-30,,
task,DD-II: Multiplexers (2/3),,,,,,2023-10-30,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (6/10),,,,,,2023-10-30,,
task,OOP-II: Inheritance versus delegation (1/2),,,,,,2023-10-30,,
task,Eng-III: understanding values in a human-to-human relationship (2/2),,,,,,2023-10-30,,
task,Math-III: Graph terminology and special types of graphs (3/3),,,,,,2023-10-30,,
task,Math-III: Subgraphs (1/4),,,,,,2023-10-31,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (4/13),,,,,,2023-10-31,,
task,DD-II: Multiplexers (3/3),,,,,,2023-10-31,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (7/10),,,,,,2023-10-31,,
task,OOP-II: Inheritance versus delegation (2/2),,,,,,2023-10-31,,
task,DD Lab: 5. Design and implement shift-registers. (9/12),,,,,,2023-10-31,,
task,Eng-III: Understanding Trust (1/2),,,,,,2023-10-31,,
task,DSA-III: Binary search tree ADT (1/4),,,,,,2023-10-31,,
task,OOP-II: Inheritance rules (1/3),,,,,,2023-11-01,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (5/13),,,,,,2023-11-01,,
task,DD-II: Introduction to HDL (1/3),,,,,,2023-11-01,,
task,Math-III: Subgraphs (2/4),,,,,,2023-11-01,,
task,DSA-III: Binary search tree ADT (2/4),,,,,,2023-11-01,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (8/10),,,,,,2023-11-01,,
task,Eng-III: Understanding Trust (2/2),,,,,,2023-11-01,,
task,DD Lab: 5. Design and implement shift-registers. (10/12),,,,,,2023-11-01,,
task,DD Lab: 5. Design and implement shift-registers. (11/12),,,,,,2023-11-02,,
task,OOP-II: Inheritance rules (2/3),,,,,,2023-11-02,,
task,DD-II: Introduction to HDL (2/3),,,,,,2023-11-02,,
task,Eng-III: The foundational value in relationship (1/2),,,,,,2023-11-02,,
task,Math-III: Subgraphs (3/4),,,,,,2023-11-02,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (6/13),,,,,,2023-11-02,,
task,DSA-III: Binary search tree ADT (3/4),,,,,,2023-11-02,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (9/10),,,,,,2023-11-02,,
task,DSA Lab: 6. Implement AVL trees (e.g Implement dictionary) (10/10),,,,,,2023-11-03,,
task,Eng-III: The foundational value in relationship (2/2),,,,,,2023-11-03,,
task,DD Lab: 5. Design and implement shift-registers. (12/12),,,,,,2023-11-03,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (7/13),,,,,,2023-11-03,,
task,Math-III: Subgraphs (4/4),,,,,,2023-11-03,,
task,OOP-II: Inheritance rules (3/3),,,,,,2023-11-03,,
task,DD-II: Introduction to HDL (3/3),,,,,,2023-11-03,,
task,DSA-III: Binary search tree ADT (4/4),,,,,,2023-11-03,,
task,Math-III: Matrix representation of graphs and graph isomorphism (1/3),,,,,,2023-11-04,,
task,OOP-II: Inner classes (1/2),,,,,,2023-11-04,,
task,DSA-III: AVL trees (1/3),,,,,,2023-11-04,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (1/9),,,,,,2023-11-04,,
task,DD-II: HDL Models of Combinational circuits.  (1/2),,,,,,2023-11-04,,
task,DD Lab: 6. Design and implement synchronous counters. (1/11),,,,,,2023-11-04,,
task,Eng-III: Difference between intention and competence (1/1),,,,,,2023-11-04,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (8/13),,,,,,2023-11-04,,
task,Math-III: Matrix representation of graphs and graph isomorphism (2/3),,,,,,2023-11-05,,
task,DD Lab: 6. Design and implement synchronous counters. (2/11),,,,,,2023-11-05,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (2/9),,,,,,2023-11-05,,
task,DD-II: HDL Models of Combinational circuits.  (2/2),,,,,,2023-11-05,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (9/13),,,,,,2023-11-05,,
task,DSA-III: AVL trees (2/3),,,,,,2023-11-05,,
task,OOP-II: Inner classes (2/2),,,,,,2023-11-05,,
task,Eng-III: Understanding Respect (1/2),,,,,,2023-11-05,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (3/9),,,,,,2023-11-06,,
task,DSA-III: AVL trees (3/3),,,,,,2023-11-06,,
task,OOP-II: Examples in Java.  (1/2),,,,,,2023-11-06,,
task,Math-III: Matrix representation of graphs and graph isomorphism (3/3),,,,,,2023-11-06,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (10/13),,,,,,2023-11-06,,
task,DD-III: Sequential Circuits (1/3),,,,,,2023-11-06,,
task,DD Lab: 6. Design and implement synchronous counters. (3/11),,,,,,2023-11-06,,
task,Eng-III: Understanding Respect (2/2),,,,,,2023-11-06,,
task,Math-III: Connectivity (1/3),,,,,,2023-11-07,,
task,DD Lab: 6. Design and implement synchronous counters. (4/11),,,,,,2023-11-07,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (11/13),,,,,,2023-11-07,,
task,DSA-III: Tree traversals (1/3),,,,,,2023-11-07,,
task,Eng-III: as the right evaluation (1/2),,,,,,2023-11-07,,
task,OOP-II: Examples in Java.  (2/2),,,,,,2023-11-07,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (4/9),,,,,,2023-11-07,,
task,DD-III: Sequential Circuits (2/3),,,,,,2023-11-07,,
task,DSA-III: Tree traversals (2/3),,,,,,2023-11-08,,
task,DD Lab: 6. Design and implement synchronous counters. (5/11),,,,,,2023-11-08,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (5/9),,,,,,2023-11-08,,
task,OOP-III: Polymorphism: Method overloading and overriding (1/2),,,,,,2023-11-08,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (12/13),,,,,,2023-11-08,,
task,Eng-III: as the right evaluation (2/2),,,,,,2023-11-08,,
task,Math-III: Connectivity (2/3),,,,,,2023-11-08,,
task,DD-III: Sequential Circuits (3/3),,,,,,2023-11-08,,
task,OOP Lab: 5. Programs using Exception handling. (E.g. Bank Account manipulation) (13/13),,,,,,2023-11-09,,
task,DD Lab: 6. Design and implement synchronous counters. (6/11),,,,,,2023-11-09,,
task,OOP-III: Polymorphism: Method overloading and overriding (2/2),,,,,,2023-11-09,,
task,DSA-III: Tree traversals (3/3),,,,,,2023-11-09,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (6/9),,,,,,2023-11-09,,
task,DD-III: Storage Elements: Latches (1/3),,,,,,2023-11-09,,
task,Math-III: Connectivity (3/3),,,,,,2023-11-09,,
task,Eng-III: Difference between respect and differentiation (1/2),,,,,,2023-11-09,,
task,OOP-III: Dynamic method dispatch (1/2),,,,,,2023-11-10,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (1/13),,,,,,2023-11-10,,
task,Eng-III: Difference between respect and differentiation (2/2),,,,,,2023-11-10,,
task,DD Lab: 6. Design and implement synchronous counters. (7/11),,,,,,2023-11-10,,
task,Math-III: Eulerian and Hamilton graphs.  (1/3),,,,,,2023-11-10,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (7/9),,,,,,2023-11-10,,
task,DSA-III: B- Trees (1/3),,,,,,2023-11-10,,
task,DD-III: Storage Elements: Latches (2/3),,,,,,2023-11-10,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (2/13),,,,,,2023-11-11,,
task,DSA-III: B- Trees (2/3),,,,,,2023-11-11,,
task,DD-III: Storage Elements: Latches (3/3),,,,,,2023-11-11,,
task,Eng-III: the other salient values in a relationship (1/2),,,,,,2023-11-11,,
task,Math-III: Eulerian and Hamilton graphs.  (2/3),,,,,,2023-11-11,,
task,OOP-III: Dynamic method dispatch (2/2),,,,,,2023-11-11,,
task,DD Lab: 6. Design and implement synchronous counters. (8/11),,,,,,2023-11-11,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (8/9),,,,,,2023-11-11,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (3/13),,,,,,2023-11-12,,
task,DD-III: Flip (1/3),,,,,,2023-11-12,,
task,Eng-III: the other salient values in a relationship (2/2),,,,,,2023-11-12,,
task,DD Lab: 6. Design and implement synchronous counters. (9/11),,,,,,2023-11-12,,
task,DSA Lab: 7. Implement priority queue using binary heaps (e.g Storing employee records based upon salary) (9/9),,,,,,2023-11-12,,
task,Math-III: Eulerian and Hamilton graphs.  (3/3),,,,,,2023-11-12,,
task,DSA-III: B- Trees (3/3),,,,,,2023-11-12,,
task,OOP-III: Exceptions: Hierarchy (1/2),,,,,,2023-11-12,,
task,Eng-III: Understanding the harmony in the society (1/2),,,,,,2023-11-13,,
task,Math-IV: Algebraic systems (1/3),,,,,,2023-11-13,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (4/13),,,,,,2023-11-13,,
task,DSA-III: Priority Queues: Binary heap.  (1/3),,,,,,2023-11-13,,
task,DD Lab: 6. Design and implement synchronous counters. (10/11),,,,,,2023-11-13,,
task,OOP-III: Exceptions: Hierarchy (2/2),,,,,,2023-11-13,,
task,DD-III: Flip (2/3),,,,,,2023-11-13,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (1/10),,,,,,2023-11-13,,
task,DSA-III: Priority Queues: Binary heap.  (2/3),,,,,,2023-11-14,,
task,Math-IV: Algebraic systems (2/3),,,,,,2023-11-14,,
task,Eng-III: Understanding the harmony in the society (2/2),,,,,,2023-11-14,,
task,DD-III: Flip (3/3),,,,,,2023-11-14,,
task,DD Lab: 6. Design and implement synchronous counters. (11/11),,,,,,2023-11-14,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (5/13),,,,,,2023-11-14,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (2/10),,,,,,2023-11-14,,
task,OOP-III: Built-in exceptions (1/2),,,,,,2023-11-14,,
task,DD-III: Flops (1/2),,,,,,2023-11-15,,
task,DD Lab: 7. Design and implement asynchronous counters. (1/12),,,,,,2023-11-15,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (6/13),,,,,,2023-11-15,,
task,DSA-III: Priority Queues: Binary heap.  (3/3),,,,,,2023-11-15,,
task,OOP-III: Built-in exceptions (2/2),,,,,,2023-11-15,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (3/10),,,,,,2023-11-15,,
task,Math-IV: Algebraic systems (3/3),,,,,,2023-11-15,,
task,Eng-III: comprehensive Human Goals (1/2),,,,,,2023-11-15,,
task,Eng-III: comprehensive Human Goals (2/2),,,,,,2023-11-16,,
task,OOP-III: Creating own exception (1/3),,,,,,2023-11-16,,
task,DSA-IV: Graph Algorithms: Definitions (1/3),,,,,,2023-11-16,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (4/10),,,,,,2023-11-16,,
task,DD-III: Flops (2/2),,,,,,2023-11-16,,
task,Math-IV: Semi groups and monoids (1/3),,,,,,2023-11-16,,
task,DD Lab: 7. Design and implement asynchronous counters. (2/12),,,,,,2023-11-16,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (7/13),,,,,,2023-11-16,,
task,OOP-III: Creating own exception (2/3),,,,,,2023-11-17,,
task,DSA-IV: Graph Algorithms: Definitions (2/3),,,,,,2023-11-17,,
task,Math-IV: Semi groups and monoids (2/3),,,,,,2023-11-17,,
task,DD Lab: 7. Design and implement asynchronous counters. (3/12),,,,,,2023-11-17,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (5/10),,,,,,2023-11-17,,
task,Eng-III: Visualizing a universal harmonious order in society (1/1),,,,,,2023-11-17,,
task,DD-III: Analysis of Clocked Sequential Circuits (1/3),,,,,,2023-11-17,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (8/13),,,,,,2023-11-17,,
task,Math-IV: Semi groups and monoids (3/3),,,,,,2023-11-18,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (6/10),,,,,,2023-11-18,,
task,DD Lab: 7. Design and implement asynchronous counters. (4/12),,,,,,2023-11-18,,
task,OOP-III: Creating own exception (3/3),,,,,,2023-11-18,,
task,DSA-IV: Graph Algorithms: Definitions (3/3),,,,,,2023-11-18,,
task,DD-III: Analysis of Clocked Sequential Circuits (2/3),,,,,,2023-11-18,,
task,Eng-III: Undivided Society (1/2),,,,,,2023-11-18,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (9/13),,,,,,2023-11-18,,
task,DSA-IV: Representation of graphs (1/3),,,,,,2023-11-19,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (7/10),,,,,,2023-11-19,,
task,Math-IV: Groups (1/3),,,,,,2023-11-19,,
task,OOP-III: Packages in Java (1/2),,,,,,2023-11-19,,
task,Eng-III: Undivided Society (2/2),,,,,,2023-11-19,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (10/13),,,,,,2023-11-19,,
task,DD Lab: 7. Design and implement asynchronous counters. (5/12),,,,,,2023-11-19,,
task,DD-III: Analysis of Clocked Sequential Circuits (3/3),,,,,,2023-11-19,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (8/10),,,,,,2023-11-20,,
task,Eng-III: Universal Order (1/2),,,,,,2023-11-20,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (11/13),,,,,,2023-11-20,,
task,OOP-III: Packages in Java (2/2),,,,,,2023-11-20,,
task,DSA-IV: Representation of graphs (2/3),,,,,,2023-11-20,,
task,Math-IV: Groups (2/3),,,,,,2023-11-20,,
task,DD Lab: 7. Design and implement asynchronous counters. (6/12),,,,,,2023-11-20,,
task,DD-III: State Reduction and Assignment (1/3),,,,,,2023-11-20,,
task,OOP-III: Examples in Java.  (1/2),,,,,,2023-11-21,,
task,Math-IV: Groups (3/3),,,,,,2023-11-21,,
task,DD-III: State Reduction and Assignment (2/3),,,,,,2023-11-21,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (9/10),,,,,,2023-11-21,,
task,DSA-IV: Representation of graphs (3/3),,,,,,2023-11-21,,
task,Eng-III: Universal Order (2/2),,,,,,2023-11-21,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (12/13),,,,,,2023-11-21,,
task,DD Lab: 7. Design and implement asynchronous counters. (7/12),,,,,,2023-11-21,,
task,Math-IV: Subgroups Homomorphisms (1/3),,,,,,2023-11-22,,
task,OOP Lab: 6. Program to implement packages (Eg: Currency converter) (13/13),,,,,,2023-11-22,,
task,OOP-III: Examples in Java.  (2/2),,,,,,2023-11-22,,
task,DSA-IV: Graph Traversals: Breadth-first traversal (1/3),,,,,,2023-11-22,,
task,Eng-III: From family to world family!  (1/2),,,,,,2023-11-22,,
task,DD-III: State Reduction and Assignment (3/3),,,,,,2023-11-22,,
task,DSA Lab: 8. Graph representation and implement graph traversal algorithms (10/10),,,,,,2023-11-22,,
task,DD Lab: 7. Design and implement asynchronous counters. (8/12),,,,,,2023-11-22,,
task,Math-IV: Subgroups Homomorphisms (2/3),,,,,,2023-11-23,,
task,DD Lab: 7. Design and implement asynchronous counters. (9/12),,,,,,2023-11-23,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (1/10),,,,,,2023-11-23,,
task,Eng-III: From family to world family!  (2/2),,,,,,2023-11-23,,
task,DD-III: Design Procedure (1/3),,,,,,2023-11-23,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (1/13)",,,,,,2023-11-23,,
task,OOP-IV: Definition and concepts: Generic classes and generic methods (1/2),,,,,,2023-11-23,,
task,DSA-IV: Graph Traversals: Breadth-first traversal (2/3),,,,,,2023-11-23,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (2/10),,,,,,2023-11-24,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (2/13)",,,,,,2023-11-24,,
task,DSA-IV: Graph Traversals: Breadth-first traversal (3/3),,,,,,2023-11-24,,
task,Eng-IV: Understanding the harmony in Nature (1/2),,,,,,2023-11-24,,
task,OOP-IV: Definition and concepts: Generic classes and generic methods (2/2),,,,,,2023-11-24,,
task,DD-III: Design Procedure (2/3),,,,,,2023-11-24,,
task,DD Lab: 7. Design and implement asynchronous counters. (10/12),,,,,,2023-11-24,,
task,Math-IV: Subgroups Homomorphisms (3/3),,,,,,2023-11-24,,
task,DD Lab: 7. Design and implement asynchronous counters. (11/12),,,,,,2023-11-25,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (3/10),,,,,,2023-11-25,,
task,Eng-IV: Understanding the harmony in Nature (2/2),,,,,,2023-11-25,,
task,DSA-IV: Depth-first traversal (1/3),,,,,,2023-11-25,,
task,Math-IV: Normal subgroup and coset (1/3),,,,,,2023-11-25,,
task,DD-III: Design Procedure (3/3),,,,,,2023-11-25,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (3/13)",,,,,,2023-11-25,,
task,OOP-IV: Generic types (1/2),,,,,,2023-11-25,,
task,DD-III: Registers and Counters (1/2),,,,,,2023-11-26,,
task,DSA-IV: Depth-first traversal (2/3),,,,,,2023-11-26,,
task,Eng-IV: Interconnectedness (1/2),,,,,,2023-11-26,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (4/10),,,,,,2023-11-26,,
task,OOP-IV: Generic types (2/2),,,,,,2023-11-26,,
task,DD Lab: 7. Design and implement asynchronous counters. (12/12),,,,,,2023-11-26,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (4/13)",,,,,,2023-11-26,,
task,Math-IV: Normal subgroup and coset (2/3),,,,,,2023-11-26,,
task,DD Lab: 8. Coding combinational circuits using HDL. (1/11),,,,,,2023-11-27,,
task,DSA-IV: Depth-first traversal (3/3),,,,,,2023-11-27,,
task,OOP-IV: Restrictions and limitations (1/2),,,,,,2023-11-27,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (5/13)",,,,,,2023-11-27,,
task,Math-IV: Normal subgroup and coset (3/3),,,,,,2023-11-27,,
task,DD-III: Registers and Counters (2/2),,,,,,2023-11-27,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (5/10),,,,,,2023-11-27,,
task,Eng-IV: Interconnectedness (2/2),,,,,,2023-11-27,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (6/13)",,,,,,2023-11-28,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (6/10),,,,,,2023-11-28,,
task,Eng-IV: self-regulation and mutual fulfilment among the four orders of nature (1/2),,,,,,2023-11-28,,
task,Math-IV: Lagrange’s theorem (1/3),,,,,,2023-11-28,,
task,DSA-IV: Topological sort (1/3),,,,,,2023-11-28,,
task,DD-III: HDL Models of Sequential Circuits.  (1/3),,,,,,2023-11-28,,
task,OOP-IV: Restrictions and limitations (2/2),,,,,,2023-11-28,,
task,DD Lab: 8. Coding combinational circuits using HDL. (2/11),,,,,,2023-11-28,,
task,OOP-IV: Inheritance rules for generic types (1/2),,,,,,2023-11-29,,
task,Eng-IV: self-regulation and mutual fulfilment among the four orders of nature (2/2),,,,,,2023-11-29,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (7/10),,,,,,2023-11-29,,
task,Math-IV: Lagrange’s theorem (2/3),,,,,,2023-11-29,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (7/13)",,,,,,2023-11-29,,
task,DSA-IV: Topological sort (2/3),,,,,,2023-11-29,,
task,DD-III: HDL Models of Sequential Circuits.  (2/3),,,,,,2023-11-29,,
task,DD Lab: 8. Coding combinational circuits using HDL. (3/11),,,,,,2023-11-29,,
task,DD-III: HDL Models of Sequential Circuits.  (3/3),,,,,,2023-11-30,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (8/10),,,,,,2023-11-30,,
task,OOP-IV: Inheritance rules for generic types (2/2),,,,,,2023-11-30,,
task,DD Lab: 8. Coding combinational circuits using HDL. (4/11),,,,,,2023-11-30,,
task,Math-IV: Lagrange’s theorem (3/3),,,,,,2023-11-30,,
task,Eng-IV: recyclability (1/2),,,,,,2023-11-30,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (8/13)",,,,,,2023-11-30,,
task,DSA-IV: Topological sort (3/3),,,,,,2023-11-30,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (9/10),,,,,,2023-12-01,,
task,OOP-IV: Reflections (1/3),,,,,,2023-12-01,,
task,Eng-IV: recyclability (2/2),,,,,,2023-12-01,,
task,DD Lab: 8. Coding combinational circuits using HDL. (5/11),,,,,,2023-12-01,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (9/13)",,,,,,2023-12-01,,
task,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (1/3),,,,,,2023-12-01,,
task,Math-IV: Definitions and examples of Rings and Fields.  (1/3),,,,,,2023-12-01,,
task,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (1/3),,,,,,2023-12-01,,
task,DSA Lab: 9. Implement Dijkstra’s algorithm using graph (e.g Find the shortest route to connect one city to another) (10/10),,,,,,2023-12-02,,
task,Eng-IV: Understanding Existence as Coexistence of mutually interacting units in all-pervasive space (1/1),,,,,,2023-12-02,,
task,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (2/3),,,,,,2023-12-02,,
task,OOP-IV: Reflections (2/3),,,,,,2023-12-02,,
task,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (2/3),,,,,,2023-12-02,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (10/13)",,,,,,2023-12-02,,
task,DD Lab: 8. Coding combinational circuits using HDL. (6/11),,,,,,2023-12-02,,
task,Math-IV: Definitions and examples of Rings and Fields.  (2/3),,,,,,2023-12-02,,
task,DSA Lab: 10. Implement any two sorting algorithms (1/9),,,,,,2023-12-03,,
task,DSA-IV: Shortest-Path Algorithms: Dijkstra’s algorithm (3/3),,,,,,2023-12-03,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (11/13)",,,,,,2023-12-03,,
task,OOP-IV: Reflections (3/3),,,,,,2023-12-03,,
task,DD Lab: 8. Coding combinational circuits using HDL. (7/11),,,,,,2023-12-03,,
task,DD-IV: Analysis and Design of Asynchronous Sequential Circuits (3/3),,,,,,2023-12-03,,
task,Eng-IV: Holistic perception of harmony at all levels of existence.  (1/2),,,,,,2023-12-03,,
task,Math-IV: Definitions and examples of Rings and Fields.  (3/3),,,,,,2023-12-03,,
task,OOP-IV: Examples in Java.  (1/2),,,,,,2023-12-04,,
task,DSA Lab: 10. Implement any two sorting algorithms (2/9),,,,,,2023-12-04,,
task,Eng-IV: Holistic perception of harmony at all levels of existence.  (2/2),,,,,,2023-12-04,,
task,DD Lab: 8. Coding combinational circuits using HDL. (8/11),,,,,,2023-12-04,,
task,Math-V: Partial ordering (1/3),,,,,,2023-12-04,,
task,DSA-IV: All-pairs shortest path.  (1/3),,,,,,2023-12-04,,
task,DD-IV: Reduction of State and Flow Tables (1/3),,,,,,2023-12-04,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (12/13)",,,,,,2023-12-04,,
task,OOP-IV: Examples in Java.  (2/2),,,,,,2023-12-05,,
task,DSA-IV: All-pairs shortest path.  (2/3),,,,,,2023-12-05,,
task,DD-IV: Reduction of State and Flow Tables (2/3),,,,,,2023-12-05,,
task,Math-V: Partial ordering (2/3),,,,,,2023-12-05,,
task,DSA Lab: 10. Implement any two sorting algorithms (3/9),,,,,,2023-12-05,,
task,DD Lab: 8. Coding combinational circuits using HDL. (9/11),,,,,,2023-12-05,,
task,Eng-V: Natural acceptance of human values (1/2),,,,,,2023-12-05,,
task,"OOP Lab: 7. Program to implement generic classes, methods (Eg: Generic stack, Sorting) (13/13)",,,,,,2023-12-05,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (1/13)",,,,,,2023-12-06,,
task,Eng-V: Natural acceptance of human values (2/2),,,,,,2023-12-06,,
task,DSA Lab: 10. Implement any two sorting algorithms (4/9),,,,,,2023-12-06,,
task,Math-V: Partial ordering (3/3),,,,,,2023-12-06,,
task,OOP-V: ALGORITHMS 9 Introduction to collections (1/2),,,,,,2023-12-06,,
task,DD Lab: 8. Coding combinational circuits using HDL. (10/11),,,,,,2023-12-06,,
task,DD-IV: Reduction of State and Flow Tables (3/3),,,,,,2023-12-06,,
task,DSA-IV: All-pairs shortest path.  (3/3),,,,,,2023-12-06,,
task,DD-IV: Race-free State Assignment (1/2),,,,,,2023-12-07,,
task,DSA-V: Sorting: Insertion sort (1/3),,,,,,2023-12-07,,
task,OOP-V: ALGORITHMS 9 Introduction to collections (2/2),,,,,,2023-12-07,,
task,Eng-V: Definitiveness of Ethical Human Conduct (1/2),,,,,,2023-12-07,,
task,DSA Lab: 10. Implement any two sorting algorithms (5/9),,,,,,2023-12-07,,
task,DD Lab: 8. Coding combinational circuits using HDL. (11/11),,,,,,2023-12-07,,
task,Math-V: Posets (1/3),,,,,,2023-12-07,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (2/13)",,,,,,2023-12-07,,
task,DSA Lab: 10. Implement any two sorting algorithms (6/9),,,,,,2023-12-08,,
task,Math-V: Posets (2/3),,,,,,2023-12-08,,
task,OOP-V: Collection Classes and Interfaces: Array list (1/2),,,,,,2023-12-08,,
task,DD Lab: 9. Coding sequential circuits using HDL. (1/12),,,,,,2023-12-08,,
task,DSA-V: Sorting: Insertion sort (2/3),,,,,,2023-12-08,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (3/13)",,,,,,2023-12-08,,
task,DD-IV: Race-free State Assignment (2/2),,,,,,2023-12-08,,
task,Eng-V: Definitiveness of Ethical Human Conduct (2/2),,,,,,2023-12-08,,
task,DD Lab: 9. Coding sequential circuits using HDL. (2/12),,,,,,2023-12-09,,
task,OOP-V: Collection Classes and Interfaces: Array list (2/2),,,,,,2023-12-09,,
task,Math-V: Posets (3/3),,,,,,2023-12-09,,
task,Eng-V: Basis for Humanistic Education (1/2),,,,,,2023-12-09,,
task,DSA-V: Sorting: Insertion sort (3/3),,,,,,2023-12-09,,
task,DSA Lab: 10. Implement any two sorting algorithms (7/9),,,,,,2023-12-09,,
task,DD-IV: Hazards.  (1/3),,,,,,2023-12-09,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (4/13)",,,,,,2023-12-09,,
task,DD-IV: Hazards.  (2/3),,,,,,2023-12-10,,
task,Math-V: Lattices as Posets (1/3),,,,,,2023-12-10,,
task,DD Lab: 9. Coding sequential circuits using HDL. (3/12),,,,,,2023-12-10,,
task,OOP-V: Linked list (1/2),,,,,,2023-12-10,,
task,Eng-V: Basis for Humanistic Education (2/2),,,,,,2023-12-10,,
task,DSA-V: Shell sort (1/3),,,,,,2023-12-10,,
task,DSA Lab: 10. Implement any two sorting algorithms (8/9),,,,,,2023-12-10,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (5/13)",,,,,,2023-12-10,,
task,DD-IV: Hazards.  (3/3),,,,,,2023-12-11,,
task,DSA Lab: 10. Implement any two sorting algorithms (9/9),,,,,,2023-12-11,,
task,DSA-V: Shell sort (2/3),,,,,,2023-12-11,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (6/13)",,,,,,2023-12-11,,
task,OOP-V: Linked list (2/2),,,,,,2023-12-11,,
task,Eng-V: Humanistic Constitution and Humanistic Universal Order (1/2),,,,,,2023-12-11,,
task,Math-V: Lattices as Posets (2/3),,,,,,2023-12-11,,
task,DD Lab: 9. Coding sequential circuits using HDL. (4/12),,,,,,2023-12-11,,
task,DD Lab: 9. Coding sequential circuits using HDL. (5/12),,,,,,2023-12-12,,
task,Eng-V: Humanistic Constitution and Humanistic Universal Order (2/2),,,,,,2023-12-12,,
task,OOP-V: Queue (1/2),,,,,,2023-12-12,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (1/10),,,,,,2023-12-12,,
task,DSA-V: Shell sort (3/3),,,,,,2023-12-12,,
task,Math-V: Lattices as Posets (3/3),,,,,,2023-12-12,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (7/13)",,,,,,2023-12-12,,
task,DD-V: RAM (1/3),,,,,,2023-12-12,,
task,DD Lab: 9. Coding sequential circuits using HDL. (6/12),,,,,,2023-12-13,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (2/10),,,,,,2023-12-13,,
task,DD-V: RAM (2/3),,,,,,2023-12-13,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (8/13)",,,,,,2023-12-13,,
task,Eng-V: Competence in Professional Ethics (1/2),,,,,,2023-12-13,,
task,Math-V: Properties of lattices (1/3),,,,,,2023-12-13,,
task,DSA-V: Radix Exchange sort (1/3),,,,,,2023-12-13,,
task,OOP-V: Queue (2/2),,,,,,2023-12-13,,
task,DD-V: RAM (3/3),,,,,,2023-12-14,,
task,OOP-V: Set (1/2),,,,,,2023-12-14,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (3/10),,,,,,2023-12-14,,
task,DD Lab: 9. Coding sequential circuits using HDL. (7/12),,,,,,2023-12-14,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (9/13)",,,,,,2023-12-14,,
task,Math-V: Properties of lattices (2/3),,,,,,2023-12-14,,
task,DSA-V: Radix Exchange sort (2/3),,,,,,2023-12-14,,
task,Eng-V: Competence in Professional Ethics (2/2),,,,,,2023-12-14,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (10/13)",,,,,,2023-12-15,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (4/10),,,,,,2023-12-15,,
task,DD Lab: 9. Coding sequential circuits using HDL. (8/12),,,,,,2023-12-15,,
task,OOP-V: Set (2/2),,,,,,2023-12-15,,
task,Eng-V: augmenting universal human order (1/2),,,,,,2023-12-15,,
task,DSA-V: Radix Exchange sort (3/3),,,,,,2023-12-15,,
task,Math-V: Properties of lattices (3/3),,,,,,2023-12-15,,
task,DD-V: Memory Decoding (1/3),,,,,,2023-12-15,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (5/10),,,,,,2023-12-16,,
task,DSA-V: Hashing: Hash function (1/3),,,,,,2023-12-16,,
task,Eng-V: augmenting universal human order (2/2),,,,,,2023-12-16,,
task,Math-V: Lattices as algebraic systems (1/3),,,,,,2023-12-16,,
task,DD-V: Memory Decoding (2/3),,,,,,2023-12-16,,
task,DD Lab: 9. Coding sequential circuits using HDL. (9/12),,,,,,2023-12-16,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (11/13)",,,,,,2023-12-16,,
task,OOP-V: Trees (1/3),,,,,,2023-12-16,,
task,DSA-V: Hashing: Hash function (2/3),,,,,,2023-12-17,,
task,DD-V: Memory Decoding (3/3),,,,,,2023-12-17,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (12/13)",,,,,,2023-12-17,,
task,DD Lab: 9. Coding sequential circuits using HDL. (10/12),,,,,,2023-12-17,,
task,Math-V: Lattices as algebraic systems (2/3),,,,,,2023-12-17,,
task,Eng-V: the scope and characteristics of people-friendly and eco-friendly (1/1),,,,,,2023-12-17,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (6/10),,,,,,2023-12-17,,
task,OOP-V: Trees (2/3),,,,,,2023-12-17,,
task,DD Lab: 9. Coding sequential circuits using HDL. (11/12),,,,,,2023-12-18,,
task,DD-V: Error Detection and Correction (1/2),,,,,,2023-12-18,,
task,OOP-V: Trees (3/3),,,,,,2023-12-18,,
task,DSA-V: Hashing: Hash function (3/3),,,,,,2023-12-18,,
task,"OOP Lab: 8. Program to perform operations using Collection classes (Eg: ArrayList, LinkedList) (13/13)",,,,,,2023-12-18,,
task,Eng-V: Holistic Technologies (1/2),,,,,,2023-12-18,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (7/10),,,,,,2023-12-18,,
task,Math-V: Lattices as algebraic systems (3/3),,,,,,2023-12-18,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (1/13),,,,,,2023-12-19,,
task,DD Lab: 9. Coding sequential circuits using HDL. (12/12),,,,,,2023-12-19,,
task,DD-V: Error Detection and Correction (2/2),,,,,,2023-12-19,,
task,Math-V: Sublattices (1/3),,,,,,2023-12-19,,
task,Eng-V: Holistic Technologies (2/2),,,,,,2023-12-19,,
task,DSA-V: Separate chaining (1/3),,,,,,2023-12-19,,
task,OOP-V: Iterators for collections (1/2),,,,,,2023-12-19,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (8/10),,,,,,2023-12-19,,
task,DSA-V: Separate chaining (2/3),,,,,,2023-12-20,,
task,DD-V: ROM (1/3),,,,,,2023-12-20,,
task,Math-V: Sublattices (2/3),,,,,,2023-12-20,,
task,Eng-V: production systems and management models (1/2),,,,,,2023-12-20,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (9/10),,,,,,2023-12-20,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (1/12),,,,,,2023-12-20,,
task,OOP-V: Iterators for collections (2/2),,,,,,2023-12-20,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (2/13),,,,,,2023-12-20,,
task,DSA-V: Separate chaining (3/3),,,,,,2023-12-21,,
task,OOP-V: Map class (1/2),,,,,,2023-12-21,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (3/13),,,,,,2023-12-21,,
task,DD-V: ROM (2/3),,,,,,2023-12-21,,
task,Eng-V: production systems and management models (2/2),,,,,,2023-12-21,,
task,DSA Lab: 11. Implement hashing using separate chaining technique (10/10),,,,,,2023-12-21,,
task,Math-V: Sublattices (3/3),,,,,,2023-12-21,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (2/12),,,,,,2023-12-21,,
task,Eng-V: Case studies (1/2),,,,,,2023-12-22,,
task,DD-V: ROM (3/3),,,,,,2023-12-22,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (3/12),,,,,,2023-12-22,,
task,OOP-V: Map class (2/2),,,,,,2023-12-22,,
task,Math-V: Direct product and Homomorphism (1/3),,,,,,2023-12-22,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (4/13),,,,,,2023-12-22,,
task,DSA-V: Open addressing (1/3),,,,,,2023-12-22,,
task,DSA Lab: 12. Mini Project (1/10),,,,,,2023-12-22,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (5/13),,,,,,2023-12-23,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (4/12),,,,,,2023-12-23,,
task,OOP-V: Collection algorithms: Sorting (1/2),,,,,,2023-12-23,,
task,DD-V: Programmable Logic Array (1/3),,,,,,2023-12-23,,
task,Math-V: Direct product and Homomorphism (2/3),,,,,,2023-12-23,,
task,DSA Lab: 12. Mini Project (2/10),,,,,,2023-12-23,,
task,DSA-V: Open addressing (2/3),,,,,,2023-12-23,,
task,Eng-V: Case studies (2/2),,,,,,2023-12-23,,
task,DSA Lab: 12. Mini Project (3/10),,,,,,2023-12-24,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (6/13),,,,,,2023-12-24,,
task,DD-V: Programmable Logic Array (2/3),,,,,,2023-12-24,,
task,OOP-V: Collection algorithms: Sorting (2/2),,,,,,2023-12-24,,
task,Math-V: Direct product and Homomorphism (3/3),,,,,,2023-12-24,,
task,Eng-V: Strategy for the transition from the present state to Universal Human Order (1/2),,,,,,2023-12-24,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (5/12),,,,,,2023-12-24,,
task,DSA-V: Open addressing (3/3),,,,,,2023-12-24,,
task,DD-V: Programmable Logic Array (3/3),,,,,,2023-12-25,,
task,OOP-V: Searching (1/2),,,,,,2023-12-25,,
task,DSA Lab: 12. Mini Project (4/10),,,,,,2023-12-25,,
task,DSA-V: Rehashing (1/3),,,,,,2023-12-25,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (6/12),,,,,,2023-12-25,,
task,Eng-V: Strategy for the transition from the present state to Universal Human Order (2/2),,,,,,2023-12-25,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (7/13),,,,,,2023-12-25,,
task,Math-V: Boolean algebra (1/3),,,,,,2023-12-25,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (8/13),,,,,,2023-12-26,,
task,OOP-V: Searching (2/2),,,,,,2023-12-26,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (7/12),,,,,,2023-12-26,,
task,Eng-V: At the level of individual: as socially and ecologically responsible engineers (1/2),,,,,,2023-12-26,,
task,DD-V: Programmable Array Logic (1/3),,,,,,2023-12-26,,
task,DSA-V: Rehashing (2/3),,,,,,2023-12-26,,
task,DSA Lab: 12. Mini Project (5/10),,,,,,2023-12-26,,
task,Math-V: Boolean algebra (2/3),,,,,,2023-12-26,,
task,Math-V: Boolean algebra (3/3),,,,,,2023-12-27,,
task,Eng-V: At the level of individual: as socially and ecologically responsible engineers (2/2),,,,,,2023-12-27,,
task,DD-V: Programmable Array Logic (2/3),,,,,,2023-12-27,,
task,DSA-V: Rehashing (3/3),,,,,,2023-12-27,,
task,OOP-V: User-defined algorithms (1/2),,,,,,2023-12-27,,
task,DSA Lab: 12. Mini Project (6/10),,,,,,2023-12-27,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (8/12),,,,,,2023-12-27,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (9/13),,,,,,2023-12-27,,
task,Eng-V: technologists and managers (1/2),,,,,,2023-12-28,,
task,DD-V: Programmable Array Logic (3/3),,,,,,2023-12-28,,
task,DSA-V: Extendible hashing.  (1/4),,,,,,2023-12-28,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (9/12),,,,,,2023-12-28,,
task,DSA Lab: 12. Mini Project (7/10),,,,,,2023-12-28,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (10/13),,,,,,2023-12-28,,
task,Math-V: Stone’s representation Theorem.  (1/4),,,,,,2023-12-28,,
task,OOP-V: User-defined algorithms (2/2),,,,,,2023-12-28,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (10/12),,,,,,2023-12-29,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (11/13),,,,,,2023-12-29,,
task,OOP-V: Examples in Java.  (1/3),,,,,,2023-12-29,,
task,Eng-V: technologists and managers (2/2),,,,,,2023-12-29,,
task,DSA Lab: 12. Mini Project (8/10),,,,,,2023-12-29,,
task,DSA-V: Extendible hashing.  (2/4),,,,,,2023-12-29,,
task,DD-V: Sequential Programmable Devices.  (1/3),,,,,,2023-12-29,,
task,Math-V: Stone’s representation Theorem.  (2/4),,,,,,2023-12-29,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (11/12),,,,,,2023-12-30,,
task,DD-V: Sequential Programmable Devices.  (2/3),,,,,,2023-12-30,,
task,OOP-V: Examples in Java.  (2/3),,,,,,2023-12-30,,
task,Math-V: Stone’s representation Theorem.  (3/4),,,,,,2023-12-30,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (12/13),,,,,,2023-12-30,,
task,DSA-V: Extendible hashing.  (3/4),,,,,,2023-12-30,,
task,Eng-V: At the level of society: as mutually enriching institutions and organizations.  (1/2),,,,,,2023-12-30,,
task,DSA Lab: 12. Mini Project (9/10),,,,,,2023-12-30,,
task,DSA-V: Extendible hashing.  (4/4),,,,,,2023-12-31,,
task,DD Lab: 10. Design and implementation of a simple digital system (Mini Project). (12/12),,,,,,2023-12-31,,
task,OOP-V: Examples in Java.  (3/3),,,,,,2023-12-31,,
task,DD-V: Sequential Programmable Devices.  (3/3),,,,,,2023-12-31,,
task,Math-V: Stone’s representation Theorem.  (4/4),,,,,,2023-12-31,,
task,Eng-V: At the level of society: as mutually enriching institutions and organizations.  (2/2),,,,,,2023-12-31,,
task,DSA Lab: 12. Mini Project (10/10),,,,,,2023-12-31,,
task,OOP Lab: 9. Develop a mini project for any application using the constructs of Java. (13/13),,,,,,2023-12-31,,
